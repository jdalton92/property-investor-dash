{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Shared/Notification/NotificationAlert.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearNotification } from \"../../../reducers/notificationReducer\";\nimport Button from \"../Button\";\nimport { Icon } from \"../Icon\";\nimport { CONSTANTS } from \"../../../static/constants\";\nimport MessageIcon from \"../../../styles/svg/message.svg\";\nimport TickIcon from \"../../../styles/svg/tick.svg\";\nimport ErrorIcon from \"../../../styles/svg/error.svg\";\nimport CloseIcon from \"../../../styles/svg/close.svg\";\n\nconst NotificationAlert = ({\n  notification,\n  clearNotification,\n  key\n}) => {\n  const handleCloseNotification = e => {\n    e.preventDefault();\n    clearNotification(notification.id);\n  };\n\n  let notificationType;\n  let iconUrl;\n\n  switch (notification.type) {\n    case CONSTANTS.NOTIFICATION.MESSAGE:\n      notificationType = \"message\";\n      iconUrl = MessageIcon;\n      break;\n\n    case CONSTANTS.NOTIFICATION.SUCCESS:\n      notificationType = \"success\";\n      iconUrl = TickIcon;\n      break;\n\n    case CONSTANTS.NOTIFICATION.ERROR:\n      notificationType = \"error\";\n      iconUrl = ErrorIcon;\n      break;\n\n    default:\n      notificationType = \"message\";\n      iconUrl = MessageIcon;\n  }\n\n  const toTitleCase = string => {\n    return string.replace(/\\w\\S*/g, txt => {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    key: key,\n    className: \"notification p8 ml8 mr8 mb8 fade-in flex-row align-c relative bs-2 jump r bs-3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    url: iconUrl,\n    color: \"white\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w100 ml8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `${notificationType} bold`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, toTitleCase(notificationType), \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-white pl4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, typeof notification.message === \"string\" ? ` ${notification.message}` : ` ${notification.statusText}`)), /*#__PURE__*/React.createElement(Button, {\n    ariaLabel: \"Close\",\n    dataBalloonPos: \"left\",\n    extraClass: \"button-transp-p align-c justify-c\",\n    onClick: handleCloseNotification,\n    iconUrl: CloseIcon,\n    iconColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapDispatchToProps = {\n  clearNotification\n};\nexport default connect(null, mapDispatchToProps)(NotificationAlert);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Shared/Notification/NotificationAlert.js"],"names":["React","connect","clearNotification","Button","Icon","CONSTANTS","NotificationAlert","notification","key","handleCloseNotification","e","preventDefault","id","notificationType","iconUrl","type","NOTIFICATION","MESSAGE","MessageIcon","SUCCESS","TickIcon","ERROR","ErrorIcon","toTitleCase","string","replace","txt","charAt","toUpperCase","substr","toLowerCase","message","statusText","CloseIcon","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearNotification } from \"../../../reducers/notificationReducer\";\nimport Button from \"../Button\";\nimport { Icon } from \"../Icon\";\nimport { CONSTANTS } from \"../../../static/constants\";\nimport MessageIcon from \"../../../styles/svg/message.svg\";\nimport TickIcon from \"../../../styles/svg/tick.svg\";\nimport ErrorIcon from \"../../../styles/svg/error.svg\";\nimport CloseIcon from \"../../../styles/svg/close.svg\";\n\nconst NotificationAlert = ({ notification, clearNotification, key }) => {\n  const handleCloseNotification = (e) => {\n    e.preventDefault();\n    clearNotification(notification.id);\n  };\n\n  let notificationType;\n  let iconUrl;\n  switch (notification.type) {\n    case CONSTANTS.NOTIFICATION.MESSAGE:\n      notificationType = \"message\";\n      iconUrl = MessageIcon;\n      break;\n    case CONSTANTS.NOTIFICATION.SUCCESS:\n      notificationType = \"success\";\n      iconUrl = TickIcon;\n      break;\n    case CONSTANTS.NOTIFICATION.ERROR:\n      notificationType = \"error\";\n      iconUrl = ErrorIcon;\n      break;\n    default:\n      notificationType = \"message\";\n      iconUrl = MessageIcon;\n  }\n\n  const toTitleCase = (string) => {\n    return string.replace(/\\w\\S*/g, (txt) => {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  return (\n    <div\n      key={key}\n      className=\"notification p8 ml8 mr8 mb8 fade-in flex-row align-c relative bs-2 jump r bs-3\"\n    >\n      <Icon url={iconUrl} color={\"white\"} hover={false} active={false} />\n      <div className=\"w100 ml8\">\n        <span className={`${notificationType} bold`}>\n          {toTitleCase(notificationType)}:\n        </span>\n        <span className=\"font-white pl4\">\n          {typeof notification.message === \"string\"\n            ? ` ${notification.message}`\n            : ` ${notification.statusText}`}\n        </span>\n      </div>\n      <Button\n        ariaLabel={\"Close\"}\n        dataBalloonPos={\"left\"}\n        extraClass={\"button-transp-p align-c justify-c\"}\n        onClick={handleCloseNotification}\n        iconUrl={CloseIcon}\n        iconColor={\"white\"}\n      />\n    </div>\n  );\n};\n\nconst mapDispatchToProps = {\n  clearNotification,\n};\n\nexport default connect(null, mapDispatchToProps)(NotificationAlert);\n"]},"metadata":{},"sourceType":"module"}