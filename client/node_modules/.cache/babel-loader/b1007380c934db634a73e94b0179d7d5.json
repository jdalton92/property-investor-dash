{"ast":null,"code":"import dashboardService from \"../services/dashboard\";\nlet initialState = {\n  isFetching: false,\n  preSave: true,\n  data: []\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state,\n        isFetching: true\n      };\n\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state,\n        isFetching: false,\n        preSave: true\n      };\n\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [action.data]\n      };\n\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...action.data]\n      };\n\n    case \"GET_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [action.data]\n      };\n\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data]\n      };\n\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter(d => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data]\n      };\n\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter(d => d._id !== action.id)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboards = await dashboardService.getAllDash();\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboard = await dashboardService.getDash(id);\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const testDashboard = dashboard => {\n  return dispatch => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard\n    });\n  };\n};\nexport const saveDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const updateDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const deleteDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      await dashboardService.removeDash(id);\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport default dashboardReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/dashboardReducer.js"],"names":["dashboardService","initialState","isFetching","preSave","data","dashboardReducer","state","action","type","dashboardList","filter","d","_id","id","getDashboards","dispatch","dashboards","getAllDash","e","content","message","response","error","getDashboard","dashboard","getDash","testDashboard","saveDashboard","dashboardObject","newDash","saveDash","updateDashboard","updateDash","deleteDashboard","removeDash"],"mappings":"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","sourcesContent":["import dashboardService from \"../services/dashboard\";\n\nlet initialState = { isFetching: false, preSave: true, data: [] };\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state, isFetching: true };\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state, isFetching: false, preSave: true };\n    case \"TEST_DASHBOARD\":\n      return { isFetching: false, preSave: true, data: [action.data] };\n    case \"INIT_DASHBOARDS\":\n      return { isFetching: false, preSave: false, data: [...action.data] };\n    case \"GET_DASHBOARD\":\n      return { isFetching: false, preSave: false, data: [action.data] };\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data],\n      };\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter((d) => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data],\n      };\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter((d) => d._id !== action.id)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboards = await dashboardService.getAllDash();\n\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const getDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboard = await dashboardService.getDash(id);\n\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const testDashboard = (dashboard) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard,\n    });\n  };\n};\n\nexport const saveDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const updateDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const deleteDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      await dashboardService.removeDash(id);\n\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport default dashboardReducer;\n"]},"metadata":{},"sourceType":"module"}