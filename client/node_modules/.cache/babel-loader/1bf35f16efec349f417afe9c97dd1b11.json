{"ast":null,"code":"export var required=function required(value){return value?undefined:\"Required\";};export var mustBeNumber=function mustBeNumber(value){return isNaN(value)?\"Must be a number\":undefined;};export var minValue=function minValue(min){return function(value){return isNaN(value)||value>=min?undefined:\"Should be greater than \".concat(min);};};export var maxValue=function maxValue(max){return function(value){return isNaN(value)||value<=max?undefined:\"Should be less than \".concat(max?max:\"house price\");};};export var minLength=function minLength(min){return function(value){return(value===null||value===void 0?void 0:value.length)<min?\"Should be greater than \".concat(min,\" characters\"):undefined;};};export var maxLength=function maxLength(max){return function(value){return(value===null||value===void 0?void 0:value.length)>max?\"Should be less than \".concat(max,\" characters\"):undefined;};};export var isEmail=function isEmail(value){var email=/^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;return email.test(value)?undefined:\"Please use valid email address\";};export var equalTo=function equalTo(match){return function(value){return value===match?undefined:\"Passwords must match\";};};export var composeValidators=function composeValidators(){for(var _len=arguments.length,validators=new Array(_len),_key=0;_key<_len;_key++){validators[_key]=arguments[_key];}return function(value){return validators.reduce(function(error,validator){return error||validator(value);},undefined);};};","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/utils/formValidatorHelper.js"],"names":["required","value","undefined","mustBeNumber","isNaN","minValue","min","maxValue","max","minLength","length","maxLength","isEmail","email","test","equalTo","match","composeValidators","validators","reduce","error","validator"],"mappings":"AAAA,MAAO,IAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,KAAD,QAAYA,CAAAA,KAAK,CAAGC,SAAH,CAAe,UAAhC,EAAjB,CAEP,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACF,KAAD,QAC1BG,CAAAA,KAAK,CAACH,KAAD,CAAL,CAAe,kBAAf,CAAoCC,SADV,EAArB,CAGP,MAAO,IAAMG,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,QAAS,UAACL,KAAD,QAC/BG,CAAAA,KAAK,CAACH,KAAD,CAAL,EAAgBA,KAAK,EAAIK,GAAzB,CAA+BJ,SAA/B,kCAAqEI,GAArE,CAD+B,EAAT,EAAjB,CAGP,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,GAAD,QAAS,UAACP,KAAD,QAC/BG,CAAAA,KAAK,CAACH,KAAD,CAAL,EAAgBA,KAAK,EAAIO,GAAzB,CACIN,SADJ,+BAE2BM,GAAG,CAAGA,GAAH,CAAS,aAFvC,CAD+B,EAAT,EAAjB,CAKP,MAAO,IAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACH,GAAD,QAAS,UAACL,KAAD,QAChC,CAAAA,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAES,MAAP,EAAgBJ,GAAhB,kCAAgDA,GAAhD,gBAAmEJ,SADnC,EAAT,EAAlB,CAGP,MAAO,IAAMS,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACH,GAAD,QAAS,UAACP,KAAD,QAChC,CAAAA,KAAK,OAAL,EAAAA,KAAK,SAAL,QAAAA,KAAK,CAAES,MAAP,EAAgBF,GAAhB,+BAA6CA,GAA7C,gBAAgEN,SADhC,EAAT,EAAlB,CAGP,MAAO,IAAMU,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACX,KAAD,CAAW,CAChC,GAAMY,CAAAA,KAAK,CAAG,iDAAd,CACA,MAAOA,CAAAA,KAAK,CAACC,IAAN,CAAWb,KAAX,EAAoBC,SAApB,CAAgC,gCAAvC,CACD,CAHM,CAKP,MAAO,IAAMa,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,QAAW,UAACf,KAAD,QAChCA,CAAAA,KAAK,GAAKe,KAAV,CAAkBd,SAAlB,CAA8B,sBADE,EAAX,EAAhB,CAGP,MAAO,IAAMe,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,iCAAIC,UAAJ,0CAAIA,UAAJ,8BAAmB,UAACjB,KAAD,QAClDiB,CAAAA,UAAU,CAACC,MAAX,CAAkB,SAACC,KAAD,CAAQC,SAAR,QAAsBD,CAAAA,KAAK,EAAIC,SAAS,CAACpB,KAAD,CAAxC,EAAlB,CAAmEC,SAAnE,CADkD,EAAnB,EAA1B","sourcesContent":["export const required = (value) => (value ? undefined : \"Required\");\n\nexport const mustBeNumber = (value) =>\n  isNaN(value) ? \"Must be a number\" : undefined;\n\nexport const minValue = (min) => (value) =>\n  isNaN(value) || value >= min ? undefined : `Should be greater than ${min}`;\n\nexport const maxValue = (max) => (value) =>\n  isNaN(value) || value <= max\n    ? undefined\n    : `Should be less than ${max ? max : \"house price\"}`;\n\nexport const minLength = (min) => (value) =>\n  value?.length < min ? `Should be greater than ${min} characters` : undefined;\n\nexport const maxLength = (max) => (value) =>\n  value?.length > max ? `Should be less than ${max} characters` : undefined;\n\nexport const isEmail = (value) => {\n  const email = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,6}$/;\n  return email.test(value) ? undefined : \"Please use valid email address\";\n};\n\nexport const equalTo = (match) => (value) =>\n  value === match ? undefined : \"Passwords must match\";\n\nexport const composeValidators = (...validators) => (value) =>\n  validators.reduce((error, validator) => error || validator(value), undefined);\n"]},"metadata":{},"sourceType":"module"}