{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/CalculatorInputs/InvestorForm.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { testDashboard, getDashboard } from \"../../reducers/dashboardReducer\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport { helperMessage } from \"../../static/helperMessageText\";\nimport HelperMessage from \"../Shared/HelperMessage\";\nimport Loader from \"../Shared/Loader\";\nimport OwnerOccupierInvestorInputs from \"./OwnerOccupierInvestorInputs\";\n\nconst InvestorForm = ({\n  testDashboard,\n  dashboards,\n  getDashboard\n}) => {\n  const id = useParams().id;\n  const history = useHistory();\n  useEffect(() => {\n    if (id && !dashboards.preSave) {\n      getDashboard(id);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [id]);\n\n  const onSubmit = values => {\n    values.investor = true;\n    values.type = \"occupierInvestor\";\n    testDashboard(values);\n    history.push(\"/investor/dash\");\n  };\n\n  if (dashboards.isFetching) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 12\n      }\n    });\n  } else {\n    // const initialValues =\n    //   dashboards.preSave || id ? dashboards.data[0].values : {overPayments: [{}]};\n    const initialValues = {\n      housePrice: 1000000,\n      deposit: 200000,\n      loanType: \"principalAndInterest\",\n      interestRate: 3.5,\n      homeloanTerm: 30,\n      overPayments: [{}],\n      investmentPeriod: 15,\n      sellingCosts: 3,\n      capitalGrowth: 3.5,\n      upfrontCosts: 3,\n      recurringCosts: 5,\n      rentalYield: 3,\n      investor: true,\n      inflation: 3\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"f24 bold mt16 mb16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }\n    }, \"Investor Inputs\"), /*#__PURE__*/React.createElement(HelperMessage, {\n      type: CONSTANTS.HELPERMESSAGES.INVESTORFORM,\n      body: helperMessage.investorForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OwnerOccupierInvestorInputs, {\n      investor: true,\n      initialValues: initialValues,\n      onSubmit: onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    currentDashboard: state.dashboards.currentDashboard.values,\n    preSave: state.dashboards.currentDashboard.preSave,\n    isFetching: state.dashboards.isFetching\n  };\n};\n\nconst mapDispatchToProps = {\n  testDashboard,\n  getDashboard\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestorForm);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/CalculatorInputs/InvestorForm.js"],"names":["React","useEffect","connect","useHistory","useParams","testDashboard","getDashboard","CONSTANTS","helperMessage","HelperMessage","Loader","OwnerOccupierInvestorInputs","InvestorForm","dashboards","id","history","preSave","onSubmit","values","investor","type","push","isFetching","initialValues","housePrice","deposit","loanType","interestRate","homeloanTerm","overPayments","investmentPeriod","sellingCosts","capitalGrowth","upfrontCosts","recurringCosts","rentalYield","inflation","HELPERMESSAGES","INVESTORFORM","investorForm","mapStateToProps","state","currentDashboard","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { testDashboard, getDashboard } from \"../../reducers/dashboardReducer\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport { helperMessage } from \"../../static/helperMessageText\";\nimport HelperMessage from \"../Shared/HelperMessage\";\nimport Loader from \"../Shared/Loader\";\nimport OwnerOccupierInvestorInputs from \"./OwnerOccupierInvestorInputs\";\n\nconst InvestorForm = ({ testDashboard, dashboards, getDashboard }) => {\n  const id = useParams().id;\n  const history = useHistory();\n\n  useEffect(() => {\n    if (id && !dashboards.preSave) {\n      getDashboard(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  const onSubmit = (values) => {\n    values.investor = true;\n    values.type = \"occupierInvestor\";\n    testDashboard(values);\n    history.push(\"/investor/dash\");\n  };\n\n  if (dashboards.isFetching) {\n    return <Loader />;\n  } else {\n    // const initialValues =\n    //   dashboards.preSave || id ? dashboards.data[0].values : {overPayments: [{}]};\n\n    const initialValues = {\n      housePrice: 1000000,\n      deposit: 200000,\n      loanType: \"principalAndInterest\",\n      interestRate: 3.5,\n      homeloanTerm: 30,\n      overPayments: [{}],\n      investmentPeriod: 15,\n      sellingCosts: 3,\n      capitalGrowth: 3.5,\n      upfrontCosts: 3,\n      recurringCosts: 5,\n      rentalYield: 3,\n      investor: true,\n      inflation: 3,\n    };\n    return (\n      <>\n        <h1 className=\"f24 bold mt16 mb16\">Investor Inputs</h1>\n        <HelperMessage\n          type={CONSTANTS.HELPERMESSAGES.INVESTORFORM}\n          body={helperMessage.investorForm}\n        />\n        <OwnerOccupierInvestorInputs\n          investor={true}\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n        />\n      </>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    currentDashboard: state.dashboards.currentDashboard.values,\n    preSave: state.dashboards.currentDashboard.preSave,\n    isFetching: state.dashboards.isFetching,\n  };\n};\n\nconst mapDispatchToProps = {\n  testDashboard,\n  getDashboard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestorForm);\n"]},"metadata":{},"sourceType":"module"}