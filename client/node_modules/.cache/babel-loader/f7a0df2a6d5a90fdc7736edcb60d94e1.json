{"ast":null,"code":"import dashboardService from \"../services/dashboard\";\nconst initialOwnerData = {\n  housePrice: 1000000,\n  deposit: 200000,\n  loanType: \"principalAndInterest\",\n  interestRate: 3.5,\n  homeloanTerm: 30,\n  overPayments: [{}],\n  investmentPeriod: 15,\n  sellingCosts: 3,\n  capitalGrowth: 3.5,\n  upfrontCosts: 3,\n  recurringCosts: 1000,\n  rentalYield: 3,\n  investor: false,\n  inflation: 3\n}; // const initialDeveloperData = {\n//   acquisitionPrice: 100000,\n//   acquisitionCosts: 5,\n//   dwellings: 4,\n//   constructionCostPerDwelling: 400000,\n//   designFees: 10,\n//   constructionContingency: 10,\n//   statutoryFees: 3,\n//   constructionDuration: 24,\n//   planningAndDesign: 6,\n//   revenuePerDwelling: 750000,\n//   sellingCosts: 5,\n//   investmentPeriod: 5,\n//   recurringCosts: 30,\n//   rentalYield: 4,\n//   initialEquity: 400000,\n//   loanType: \"interestOnly\",\n//   interestRate: 3.5,\n//   loanTerm: 30,\n//   overPayments: [{}],\n//   capitalGrowth: 3.5,\n//   constructionCostGrowth: 2.5,\n// };\n\nlet initialState = {\n  isFetching: false,\n  savedDashboards: [],\n  currentDashboard: {\n    preSave: false,\n    values: {}\n  }\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state,\n        isFetching: true\n      };\n\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state,\n        isFetching: false,\n        preSave: false\n      };\n\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{\n          values: action.data\n        }]\n      };\n\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state,\n        preSave: true\n      };\n\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...action.data]\n      };\n\n    case \"GET_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [action.data]\n      };\n\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data]\n      };\n\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter(d => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data]\n      };\n\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter(d => d._id !== action.id)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboards = await dashboardService.getAllDash();\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboard = await dashboardService.getDash(id);\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const testDashboard = dashboard => {\n  return dispatch => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard\n    });\n  };\n};\nexport const preSaveDashboard = () => {\n  return dispatch => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\"\n    });\n  };\n};\nexport const saveDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const updateDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const deleteDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      await dashboardService.removeDash(id);\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport default dashboardReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/dashboardReducer.js"],"names":["dashboardService","initialOwnerData","housePrice","deposit","loanType","interestRate","homeloanTerm","overPayments","investmentPeriod","sellingCosts","capitalGrowth","upfrontCosts","recurringCosts","rentalYield","investor","inflation","initialState","isFetching","savedDashboards","currentDashboard","preSave","values","dashboardReducer","state","action","type","data","dashboardList","filter","d","_id","id","getDashboards","dispatch","dashboards","getAllDash","e","content","message","response","error","getDashboard","dashboard","getDash","testDashboard","preSaveDashboard","saveDashboard","dashboardObject","newDash","saveDash","updateDashboard","updateDash","deleteDashboard","removeDash"],"mappings":"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","sourcesContent":["import dashboardService from \"../services/dashboard\";\n\nconst initialOwnerData = {\n  housePrice: 1000000,\n  deposit: 200000,\n  loanType: \"principalAndInterest\",\n  interestRate: 3.5,\n  homeloanTerm: 30,\n  overPayments: [{}],\n  investmentPeriod: 15,\n  sellingCosts: 3,\n  capitalGrowth: 3.5,\n  upfrontCosts: 3,\n  recurringCosts: 1000,\n  rentalYield: 3,\n  investor: false,\n  inflation: 3,\n};\n\n// const initialDeveloperData = {\n//   acquisitionPrice: 100000,\n//   acquisitionCosts: 5,\n//   dwellings: 4,\n//   constructionCostPerDwelling: 400000,\n//   designFees: 10,\n//   constructionContingency: 10,\n//   statutoryFees: 3,\n//   constructionDuration: 24,\n//   planningAndDesign: 6,\n\n//   revenuePerDwelling: 750000,\n//   sellingCosts: 5,\n//   investmentPeriod: 5,\n//   recurringCosts: 30,\n//   rentalYield: 4,\n\n//   initialEquity: 400000,\n//   loanType: \"interestOnly\",\n//   interestRate: 3.5,\n//   loanTerm: 30,\n//   overPayments: [{}],\n\n//   capitalGrowth: 3.5,\n//   constructionCostGrowth: 2.5,\n// };\n\nlet initialState = {\n  isFetching: false,\n  savedDashboards: [],\n  currentDashboard: {\n    preSave: false,\n    values: {},\n  },\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state, isFetching: true };\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state, isFetching: false, preSave: false };\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{ values: action.data }],\n      };\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state, preSave: true };\n    case \"INIT_DASHBOARDS\":\n      return { isFetching: false, preSave: false, data: [...action.data] };\n    case \"GET_DASHBOARD\":\n      return { isFetching: false, preSave: false, data: [action.data] };\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data],\n      };\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter((d) => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data],\n      };\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter((d) => d._id !== action.id)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboards = await dashboardService.getAllDash();\n\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const getDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboard = await dashboardService.getDash(id);\n\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const testDashboard = (dashboard) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard,\n    });\n  };\n};\n\nexport const preSaveDashboard = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\",\n    });\n  };\n};\n\nexport const saveDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const updateDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const deleteDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      await dashboardService.removeDash(id);\n\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport default dashboardReducer;\n"]},"metadata":{},"sourceType":"module"}