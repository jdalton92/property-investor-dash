{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Shared/Notification/NotificationAlert.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearNotification } from \"../../../reducers/notificationReducer\";\nimport Button from \"../Button\";\nimport CloseIcon from \"../../../styles/svg/close.svg\";\nimport { CONSTANTS } from \"../../../static/constants\";\nimport MessageIcon from \"../../../styles/svg/message.svg\";\nimport SuccessIcon from \"../../../styles/svg/tick.svg\";\nimport ErrorIcon from \"../../../styles/svg/error.svg\";\n\nconst NotificationAlert = ({\n  notification,\n  clearNotification\n}) => {\n  const handleCloseNotification = e => {\n    e.preventDefault();\n    clearNotification(notification.id);\n  };\n\n  let notificationType;\n  let icon;\n\n  switch (notification.type) {\n    case CONSTANTS.NOTIFICATION.MESSAGE:\n      notificationType = \"message\";\n      icon = MessageIcon;\n      break;\n\n    case CONSTANTS.NOTIFICATION.SUCCESS:\n      notificationType = \"success\";\n      icon = SuccessIcon;\n      break;\n\n    case CONSTANTS.NOTIFICATION.ERROR:\n      notificationType = \"error\";\n      icon = ErrorIcon;\n      break;\n\n    default:\n      notificationType = \"message\";\n      icon = MessageIcon;\n  }\n\n  const toTitleCase = string => {\n    return string.replace(/\\w\\S*/g, txt => {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"notification p8 mb8 fade-in flex-row align-c relative bs-2 jump border-p\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"background-img\",\n    style: {\n      background: `url(${icon})`,\n      height: \"32px\",\n      width: \"32px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"w100 mr8 ml8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: `${notificationType} bold`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, toTitleCase(notificationType), \":\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-white pl4 pr8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, typeof notification.message === \"string\" ? ` ${notification.message}` : ` ${notification.statusText}`)), /*#__PURE__*/React.createElement(Button, {\n    extraClass: \"button-p\",\n    onClick: handleCloseNotification,\n    icon: CloseIcon,\n    extraStyle: {\n      alignItems: \"center\",\n      justifyContent: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }));\n}; // const mapStateToProps = (state) => {\n//   return {\n//     notification: state.notification,\n//   };\n// };\n\n\nconst mapDispatchToProps = {\n  clearNotification\n};\nexport default connect(null, mapDispatchToProps)(NotificationAlert);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Shared/Notification/NotificationAlert.js"],"names":["React","connect","clearNotification","Button","CONSTANTS","NotificationAlert","notification","handleCloseNotification","e","preventDefault","id","notificationType","icon","type","NOTIFICATION","MESSAGE","MessageIcon","SUCCESS","SuccessIcon","ERROR","ErrorIcon","toTitleCase","string","replace","txt","charAt","toUpperCase","substr","toLowerCase","background","height","width","message","statusText","CloseIcon","alignItems","justifyContent","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { clearNotification } from \"../../../reducers/notificationReducer\";\nimport Button from \"../Button\";\nimport CloseIcon from \"../../../styles/svg/close.svg\";\nimport { CONSTANTS } from \"../../../static/constants\";\nimport MessageIcon from \"../../../styles/svg/message.svg\";\nimport SuccessIcon from \"../../../styles/svg/tick.svg\";\nimport ErrorIcon from \"../../../styles/svg/error.svg\";\n\nconst NotificationAlert = ({ notification, clearNotification }) => {\n  const handleCloseNotification = (e) => {\n    e.preventDefault();\n    clearNotification(notification.id);\n  };\n\n  let notificationType;\n  let icon;\n  switch (notification.type) {\n    case CONSTANTS.NOTIFICATION.MESSAGE:\n      notificationType = \"message\";\n      icon = MessageIcon;\n      break;\n    case CONSTANTS.NOTIFICATION.SUCCESS:\n      notificationType = \"success\";\n      icon = SuccessIcon;\n      break;\n    case CONSTANTS.NOTIFICATION.ERROR:\n      notificationType = \"error\";\n      icon = ErrorIcon;\n      break;\n    default:\n      notificationType = \"message\";\n      icon = MessageIcon;\n  }\n\n  const toTitleCase = (string) => {\n    return string.replace(/\\w\\S*/g, (txt) => {\n      return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n    });\n  };\n\n  return (\n    <div className=\"notification p8 mb8 fade-in flex-row align-c relative bs-2 jump border-p\">\n      <div\n        className=\"background-img\"\n        style={{\n          background: `url(${icon})`,\n          height: \"32px\",\n          width: \"32px\",\n        }}\n      ></div>\n      <div className=\"w100 mr8 ml8\">\n        <span className={`${notificationType} bold`}>\n          {toTitleCase(notificationType)}:\n        </span>\n        <span className=\"font-white pl4 pr8\">\n          {typeof notification.message === \"string\"\n            ? ` ${notification.message}`\n            : ` ${notification.statusText}`}\n        </span>\n      </div>\n      <Button\n        extraClass={\"button-p\"}\n        onClick={handleCloseNotification}\n        icon={CloseIcon}\n        extraStyle={{\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      />\n    </div>\n  );\n};\n\n// const mapStateToProps = (state) => {\n//   return {\n//     notification: state.notification,\n//   };\n// };\n\nconst mapDispatchToProps = {\n  clearNotification,\n};\n\nexport default connect(null, mapDispatchToProps)(NotificationAlert);\n"]},"metadata":{},"sourceType":"module"}