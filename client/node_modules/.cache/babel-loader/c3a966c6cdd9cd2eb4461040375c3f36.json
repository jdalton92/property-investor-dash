{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/CalculatorInputs/Investor/InvestorForm.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Field } from \"react-final-form\";\nimport arrayMutators from \"final-form-arrays\";\nimport { testDashboard } from \"../../../reducers/dashboardReducer\";\nimport { setAccordian, setModal } from \"../../../reducers/navigationReducer\";\nimport MortgageOverpayments from \"../MortgageOverpayments\";\nimport Helper from \"../../Shared/Helper\";\nimport Loader from \"../../Shared/Loader\";\nimport FinalFormField from \"../../Shared/FinalFormField\";\nimport { required, minValue, maxValue, composeValidators } from \"../../../utils/formValidatorHelper\";\nimport { occupierInvestorTooltipHelper } from \"../../../utils/tooltipHelper\";\nimport { CONSTANTS } from \"../../../static/constants\";\n\nconst InvestorForm = ({\n  id,\n  setModal,\n  testDashboard,\n  dashboards\n}) => {\n  const history = useHistory();\n\n  const onSubmit = values => {\n    setModal(\"disclaimer\");\n    values.investor = true;\n    values.type = \"occupierInvestor\";\n    testDashboard(values);\n    history.push(\"/investor/dash\");\n  };\n\n  if (dashboards.isFetching) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    });\n  } else {\n    // const initialValues =\n    //   dashboards.preSave || id ? dashboards.data[0].values : {overPayments: [{}]};\n    const initialValues = {\n      housePrice: 1000000,\n      deposit: 200000,\n      loanType: \"principalAndInterest\",\n      interestRate: 3.5,\n      homeloanTerm: 30,\n      overPayments: [{}],\n      investmentPeriod: 15,\n      sellingCosts: 3,\n      capitalGrowth: 3.5,\n      upfrontCosts: 3,\n      recurringCosts: 1000,\n      rentalYield: 3,\n      investor: true,\n      inflation: 3\n    };\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"f24 bold mt16 mb32\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, \"Investor Inputs\"), /*#__PURE__*/React.createElement(Helper, {\n      title: \"Investor\",\n      body: \"Helper body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(OwnerOccupierInvestorForm, {\n      investor: true,\n      initialValues: initialValues,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }\n    }));\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    dashboards: state.dashboards\n  };\n};\n\nconst mapDispatchToProps = {\n  testDashboard,\n  setAccordian,\n  setModal\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestorForm);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/CalculatorInputs/Investor/InvestorForm.js"],"names":["React","connect","useHistory","Form","Field","arrayMutators","testDashboard","setAccordian","setModal","MortgageOverpayments","Helper","Loader","FinalFormField","required","minValue","maxValue","composeValidators","occupierInvestorTooltipHelper","CONSTANTS","InvestorForm","id","dashboards","history","onSubmit","values","investor","type","push","isFetching","initialValues","housePrice","deposit","loanType","interestRate","homeloanTerm","overPayments","investmentPeriod","sellingCosts","capitalGrowth","upfrontCosts","recurringCosts","rentalYield","inflation","mapStateToProps","state","mapDispatchToProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,IAAT,EAAeC,KAAf,QAA4B,kBAA5B;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AACA,SAASC,aAAT,QAA8B,oCAA9B;AACA,SAASC,YAAT,EAAuBC,QAAvB,QAAuC,qCAAvC;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,cAAP,MAA2B,6BAA3B;AACA,SACEC,QADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,iBAJF,QAKO,oCALP;AAMA,SAASC,6BAAT,QAA8C,8BAA9C;AACA,SAASC,SAAT,QAA0B,2BAA1B;;AAEA,MAAMC,YAAY,GAAG,CAAC;AACpBC,EAAAA,EADoB;AAEpBZ,EAAAA,QAFoB;AAGpBF,EAAAA,aAHoB;AAIpBe,EAAAA;AAJoB,CAAD,KAKf;AACJ,QAAMC,OAAO,GAAGpB,UAAU,EAA1B;;AAEA,QAAMqB,QAAQ,GAAIC,MAAD,IAAY;AAC3BhB,IAAAA,QAAQ,CAAC,YAAD,CAAR;AACAgB,IAAAA,MAAM,CAACC,QAAP,GAAkB,IAAlB;AACAD,IAAAA,MAAM,CAACE,IAAP,GAAc,kBAAd;AACApB,IAAAA,aAAa,CAACkB,MAAD,CAAb;AACAF,IAAAA,OAAO,CAACK,IAAR,CAAa,gBAAb;AACD,GAND;;AAQA,MAAIN,UAAU,CAACO,UAAf,EAA2B;AACzB,wBAAO,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFD,MAEO;AACL;AACA;AAEA,UAAMC,aAAa,GAAG;AACpBC,MAAAA,UAAU,EAAE,OADQ;AAEpBC,MAAAA,OAAO,EAAE,MAFW;AAGpBC,MAAAA,QAAQ,EAAE,sBAHU;AAIpBC,MAAAA,YAAY,EAAE,GAJM;AAKpBC,MAAAA,YAAY,EAAE,EALM;AAMpBC,MAAAA,YAAY,EAAE,CAAC,EAAD,CANM;AAOpBC,MAAAA,gBAAgB,EAAE,EAPE;AAQpBC,MAAAA,YAAY,EAAE,CARM;AASpBC,MAAAA,aAAa,EAAE,GATK;AAUpBC,MAAAA,YAAY,EAAE,CAVM;AAWpBC,MAAAA,cAAc,EAAE,IAXI;AAYpBC,MAAAA,WAAW,EAAE,CAZO;AAapBhB,MAAAA,QAAQ,EAAE,IAbU;AAcpBiB,MAAAA,SAAS,EAAE;AAdS,KAAtB;AAgBA,wBACE,uDACE;AAAI,MAAA,SAAS,EAAC,oBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE,UAAf;AAA2B,MAAA,IAAI,EAAE,aAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,yBAAD;AAA2B,MAAA,QAAQ,EAAE,IAArC;AAA2C,MAAA,aAAa,EAAEb,aAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,CADF;AAOD;AACF,CA9CD;;AAgDA,MAAMc,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLvB,IAAAA,UAAU,EAAEuB,KAAK,CAACvB;AADb,GAAP;AAGD,CAJD;;AAMA,MAAMwB,kBAAkB,GAAG;AACzBvC,EAAAA,aADyB;AAEzBC,EAAAA,YAFyB;AAGzBC,EAAAA;AAHyB,CAA3B;AAMA,eAAeP,OAAO,CAAC0C,eAAD,EAAkBE,kBAAlB,CAAP,CAA6C1B,YAA7C,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Field } from \"react-final-form\";\nimport arrayMutators from \"final-form-arrays\";\nimport { testDashboard } from \"../../../reducers/dashboardReducer\";\nimport { setAccordian, setModal } from \"../../../reducers/navigationReducer\";\nimport MortgageOverpayments from \"../MortgageOverpayments\";\nimport Helper from \"../../Shared/Helper\";\nimport Loader from \"../../Shared/Loader\";\nimport FinalFormField from \"../../Shared/FinalFormField\";\nimport {\n  required,\n  minValue,\n  maxValue,\n  composeValidators,\n} from \"../../../utils/formValidatorHelper\";\nimport { occupierInvestorTooltipHelper } from \"../../../utils/tooltipHelper\";\nimport { CONSTANTS } from \"../../../static/constants\";\n\nconst InvestorForm = ({\n  id,\n  setModal,\n  testDashboard,\n  dashboards,\n}) => {\n  const history = useHistory();\n\n  const onSubmit = (values) => {\n    setModal(\"disclaimer\");\n    values.investor = true;\n    values.type = \"occupierInvestor\";\n    testDashboard(values);\n    history.push(\"/investor/dash\")\n  };\n\n  if (dashboards.isFetching) {\n    return <Loader />;\n  } else {\n    // const initialValues =\n    //   dashboards.preSave || id ? dashboards.data[0].values : {overPayments: [{}]};\n\n    const initialValues = {\n      housePrice: 1000000,\n      deposit: 200000,\n      loanType: \"principalAndInterest\",\n      interestRate: 3.5,\n      homeloanTerm: 30,\n      overPayments: [{}],\n      investmentPeriod: 15,\n      sellingCosts: 3,\n      capitalGrowth: 3.5,\n      upfrontCosts: 3,\n      recurringCosts: 1000,\n      rentalYield: 3,\n      investor: true,\n      inflation: 3,\n    }\n    return (\n      <>\n        <h1 className=\"f24 bold mt16 mb32\">Investor Inputs</h1>\n        <Helper title={\"Investor\"} body={\"Helper body\"} />\n        <OwnerOccupierInvestorForm investor={true} initialValues={initialValues} />\n      </>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    dashboards: state.dashboards,\n  };\n};\n\nconst mapDispatchToProps = {\n  testDashboard,\n  setAccordian,\n  setModal,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(InvestorForm);\n"]},"metadata":{},"sourceType":"module"}