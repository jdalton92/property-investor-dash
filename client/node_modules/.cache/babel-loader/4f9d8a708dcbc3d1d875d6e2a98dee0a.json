{"ast":null,"code":"import { currencyFormatter, reducerHelper } from \"./dashboardHelper\";\nexport const occupierInvestorCalculation = ({\n  housePrice,\n  deposit,\n  loanType,\n  interestRate,\n  homeloanTerm,\n  overPayments,\n  investmentPeriod,\n  sellingCosts,\n  capitalGrowth,\n  upfrontCosts,\n  recurringCosts,\n  rentalYield,\n  investor,\n  inflation\n}) => {\n  // If value undefined then default to zero\n  // All other inputs are required\n  if (!sellingCosts) {\n    sellingCosts = 0;\n  }\n\n  if (!capitalGrowth) {\n    capitalGrowth = 0;\n  }\n\n  if (!upfrontCosts) {\n    upfrontCosts = 0;\n  }\n\n  if (!recurringCosts) {\n    recurringCosts = 0;\n  }\n\n  if (!inflation) {\n    inflation = 0;\n  }\n\n  if (!overPayments) {\n    overPayments = [{}];\n  } //Initalise loan variables\n\n\n  const t = investmentPeriod * 12;\n  const r = interestRate / 100;\n  let openingBalance = 0;\n  let closingBalance = 0;\n  let monthSummary = []; //Master Loop over investment period\n\n  for (let i = 0; i < t; i++) {\n    const purchasePrice = i === 0 ? parseInt(housePrice) : null;\n    const initialCosts = i === 0 ? purchasePrice * upfrontCosts / 100 : null;\n    const grossRealisation = i === t - 1 ? housePrice * Math.pow(1 + capitalGrowth / 100 / 12, i) : null;\n    const sellingCost = grossRealisation * sellingCosts / 100; //Finance calculations\n\n    const debtUse = i === 0 ? housePrice - deposit + initialCosts : null;\n    const equityUse = i === 0 ? parseInt(deposit) : null;\n    openingBalance = closingBalance + debtUse;\n    const openingBalanceInterest = openingBalance * (1 + r / 12);\n    const n = homeloanTerm * 12 - i;\n    const monthlyRepayment = loanType === \"interestOnly\" ? openingBalance * r / 12 : r / 12 * openingBalance * Math.pow(1 + r / 12, n) / (Math.pow(1 + r / 12, n) - 1);\n    const annualOverPayment = overPayments.filter(p => parseInt(p.year) * 12 === i + 1).reduce((a, b) => a + b.payment, 0);\n    let loanInstallment = 0;\n\n    if (i <= homeloanTerm * 12 - 1) {\n      loanInstallment = monthlyRepayment + annualOverPayment > openingBalanceInterest ? openingBalanceInterest : monthlyRepayment + annualOverPayment;\n    }\n\n    const principalRepayment = i === homeloanTerm * 12 - 1 || i === t - 1 ? openingBalanceInterest - loanInstallment : null;\n    closingBalance = openingBalanceInterest - loanInstallment - principalRepayment; // Rental income\n\n    const rentalIncome = investor ? housePrice * Math.pow(1 + capitalGrowth / 100 / 12, i) * rentalYield / 100 / 12 : null;\n    const opex = investor ? recurringCosts / 100 * rentalIncome : recurringCosts / 12 * Math.pow(1 + inflation / 100 / 12, i);\n    const preFinanceCashflow = -purchasePrice - initialCosts - opex + rentalIncome + grossRealisation - sellingCost;\n    const postFinanceCashflow = preFinanceCashflow + debtUse - loanInstallment - principalRepayment;\n    monthSummary.push({\n      month: i + 1,\n      year: Math.ceil((i + 1) / 12),\n      purchasePrice,\n      initialCosts,\n      rentalIncome,\n      opex,\n      grossRealisation,\n      sellingCost,\n      preFinanceCashflow,\n      openingBalance,\n      equityUse,\n      debtUse,\n      interest: openingBalanceInterest - openingBalance,\n      loanInstallment,\n      principalRepayment,\n      closingBalance,\n      postFinanceCashflow\n    });\n  }\n\n  return monthSummary;\n};\nexport const cumulativeChartParse = data => {\n  const labels = data.map(c => c.month);\n  const cumulativeCashflow = data.reduce((acc, c) => {\n    acc.push(c.postFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const dataObject = {\n    data: {\n      datasets: [{\n        data: [...cumulativeCashflow],\n        fill: true,\n        backgroundColor: \"#92bed2\",\n        pointBackgroundColor: \"#3282bf\",\n        borderColor: \"#3282bf\",\n        pointHighlightStroke: \"#3282bf\",\n        borderCapStyle: \"butt\"\n      }],\n      labels: [...labels]\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [{\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: value => {\n              return currencyFormatter.format(value);\n            }\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: \"Month\"\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          },\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          }\n        }\n      },\n      legend: {\n        display: false\n      }\n    }\n  };\n  return dataObject;\n};\nexport const cardParse = data => {\n  const summaryData = reducerHelper(data);\n  const dataObject = {\n    months: data.length,\n    rentalIncome: summaryData.rentalIncome,\n    opex: summaryData.opex,\n    mortgageInterest: summaryData.interest,\n    mortgagePayment: summaryData.loanInstallment,\n    profit: summaryData.postFinanceCashflow\n  };\n  return dataObject;\n};\nexport const tableParse = data => {\n  let tableData = {\n    summaryCashflow: [],\n    annualCashflow: []\n  };\n\n  for (let i = 1; i <= Math.ceil(data.length / 12); i++) {\n    const annualData = reducerHelper(data.filter(d => d.year === i));\n    tableData.annualCashflow.push({\n      year: i,\n      acquisitionCosts: -annualData.purchasePrice - annualData.initialCosts,\n      rentalIncome: annualData.rentalIncome,\n      opex: -annualData.opex,\n      netSale: annualData.grossRealisation - annualData.sellingCost,\n      preFinanceCashflow: annualData.preFinanceCashflow,\n      debtUse: annualData.debtUse,\n      equityUse: -annualData.equityUse,\n      fundingCost: -annualData.loanInstallment - annualData.principalRepayment,\n      postFinanceCashflow: annualData.postFinanceCashflow,\n      totalIncome: annualData.rentalIncome + annualData.grossRealisation,\n      totalCost: -annualData.equityUse - annualData.initialCosts - annualData.opex - annualData.sellingCost - annualData.loanInstallment - annualData.principalRepayment\n    });\n  }\n\n  const summaryData = reducerHelper(data);\n  tableData.summaryCashflow.push({\n    year: null,\n    acquisitionCosts: -summaryData.purchasePrice - summaryData.initialCosts,\n    rentalIncome: summaryData.rentalIncome,\n    opex: -summaryData.opex,\n    netSale: summaryData.grossRealisation - summaryData.sellingCost,\n    preFinanceCashflow: summaryData.preFinanceCashflow,\n    debtUse: summaryData.debtUse,\n    equityUse: -summaryData.equityUse,\n    fundingCost: -summaryData.loanInstallment - summaryData.principalRepayment,\n    postFinanceCashflow: summaryData.postFinanceCashflow,\n    totalIncome: summaryData.rentalIncome + summaryData.grossRealisation,\n    totalCost: -summaryData.equityUse - summaryData.initialCosts - summaryData.opex - summaryData.sellingCost - summaryData.loanInstallment - summaryData.principalRepayment\n  });\n  return tableData;\n};\nexport const occupierInvestorMOCCalculation = data => {\n  const summaryData = data.reduce((accumulator, item) => {\n    Object.keys(item).forEach(key => {\n      accumulator[key] = (accumulator[key] || 0) + item[key];\n    });\n    return accumulator;\n  }, []);\n  const netProfit = summaryData.postFinanceCashflow;\n  const cost = summaryData.purchasePrice + summaryData.initialCosts + summaryData.opex + summaryData.loanInstallment + summaryData.sellingCost;\n  return netProfit / cost;\n};","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/utils/occupierInvestorDashboardHelper.js"],"names":["currencyFormatter","reducerHelper","occupierInvestorCalculation","housePrice","deposit","loanType","interestRate","homeloanTerm","overPayments","investmentPeriod","sellingCosts","capitalGrowth","upfrontCosts","recurringCosts","rentalYield","investor","inflation","t","r","openingBalance","closingBalance","monthSummary","i","purchasePrice","parseInt","initialCosts","grossRealisation","Math","pow","sellingCost","debtUse","equityUse","openingBalanceInterest","n","monthlyRepayment","annualOverPayment","filter","p","year","reduce","a","b","payment","loanInstallment","principalRepayment","rentalIncome","opex","preFinanceCashflow","postFinanceCashflow","push","month","ceil","interest","cumulativeChartParse","data","labels","map","c","cumulativeCashflow","acc","length","dataObject","datasets","fill","backgroundColor","pointBackgroundColor","borderColor","pointHighlightStroke","borderCapStyle","options","maintainAspectRatio","scales","yAxes","ticks","callback","value","format","xAxes","scaleLabel","display","labelString","tooltips","callbacks","label","tooltipItem","yLabel","beforeTitle","object","legend","cardParse","summaryData","months","mortgageInterest","mortgagePayment","profit","tableParse","tableData","summaryCashflow","annualCashflow","annualData","d","acquisitionCosts","netSale","fundingCost","totalIncome","totalCost","occupierInvestorMOCCalculation","accumulator","item","Object","keys","forEach","key","netProfit","cost"],"mappings":"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","sourcesContent":["import { currencyFormatter, reducerHelper } from \"./dashboardHelper\";\n\nexport const occupierInvestorCalculation = ({\n  housePrice,\n  deposit,\n  loanType,\n  interestRate,\n  homeloanTerm,\n  overPayments,\n  investmentPeriod,\n  sellingCosts,\n  capitalGrowth,\n  upfrontCosts,\n  recurringCosts,\n  rentalYield,\n  investor,\n  inflation,\n}) => {\n  // If value undefined then default to zero\n  // All other inputs are required\n  if (!sellingCosts) {\n    sellingCosts = 0;\n  }\n  if (!capitalGrowth) {\n    capitalGrowth = 0;\n  }\n  if (!upfrontCosts) {\n    upfrontCosts = 0;\n  }\n  if (!recurringCosts) {\n    recurringCosts = 0;\n  }\n  if (!inflation) {\n    inflation = 0;\n  }\n  if (!overPayments) {\n    overPayments = [{}];\n  }\n  //Initalise loan variables\n  const t = investmentPeriod * 12;\n  const r = interestRate / 100;\n  let openingBalance = 0;\n  let closingBalance = 0;\n  let monthSummary = [];\n\n  //Master Loop over investment period\n  for (let i = 0; i < t; i++) {\n    const purchasePrice = i === 0 ? parseInt(housePrice) : null;\n    const initialCosts = i === 0 ? (purchasePrice * upfrontCosts) / 100 : null;\n\n    const grossRealisation =\n      i === t - 1\n        ? housePrice * Math.pow(1 + capitalGrowth / 100 / 12, i)\n        : null;\n\n    const sellingCost = (grossRealisation * sellingCosts) / 100;\n\n    //Finance calculations\n    const debtUse = i === 0 ? housePrice - deposit + initialCosts : null;\n    const equityUse = i === 0 ? parseInt(deposit) : null;\n\n    openingBalance = closingBalance + debtUse;\n\n    const openingBalanceInterest = openingBalance * (1 + r / 12);\n\n    const n = homeloanTerm * 12 - i;\n    const monthlyRepayment =\n      loanType === \"interestOnly\"\n        ? (openingBalance * r) / 12\n        : ((r / 12) * openingBalance * Math.pow(1 + r / 12, n)) /\n          (Math.pow(1 + r / 12, n) - 1);\n\n    const annualOverPayment = overPayments\n      .filter((p) => parseInt(p.year) * 12 === i + 1)\n      .reduce((a, b) => a + b.payment, 0);\n\n    let loanInstallment = 0;\n    if (i <= homeloanTerm * 12 - 1) {\n      loanInstallment =\n        monthlyRepayment + annualOverPayment > openingBalanceInterest\n          ? openingBalanceInterest\n          : monthlyRepayment + annualOverPayment;\n    }\n\n    const principalRepayment =\n      i === homeloanTerm * 12 - 1 || i === t - 1\n        ? openingBalanceInterest - loanInstallment\n        : null;\n\n    closingBalance =\n      openingBalanceInterest - loanInstallment - principalRepayment;\n\n    // Rental income\n    const rentalIncome = investor\n      ? (housePrice * Math.pow(1 + capitalGrowth / 100 / 12, i) * rentalYield) /\n        100 /\n        12\n      : null;\n    const opex = investor\n      ? (recurringCosts / 100) * rentalIncome\n      : (recurringCosts / 12) * Math.pow(1 + inflation / 100 / 12, i);\n\n    const preFinanceCashflow =\n      -purchasePrice -\n      initialCosts -\n      opex +\n      rentalIncome +\n      grossRealisation -\n      sellingCost;\n\n    const postFinanceCashflow =\n      preFinanceCashflow + debtUse - loanInstallment - principalRepayment;\n\n    monthSummary.push({\n      month: i + 1,\n      year: Math.ceil((i + 1) / 12),\n      purchasePrice,\n      initialCosts,\n      rentalIncome,\n      opex,\n      grossRealisation,\n      sellingCost,\n      preFinanceCashflow,\n      openingBalance,\n      equityUse,\n      debtUse,\n      interest: openingBalanceInterest - openingBalance,\n      loanInstallment,\n      principalRepayment,\n      closingBalance,\n      postFinanceCashflow,\n    });\n  }\n  return monthSummary;\n};\n\nexport const cumulativeChartParse = (data) => {\n  const labels = data.map((c) => c.month);\n  const cumulativeCashflow = data.reduce((acc, c) => {\n    acc.push(\n      c.postFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0)\n    );\n    return acc;\n  }, []);\n\n  const dataObject = {\n    data: {\n      datasets: [\n        {\n          data: [...cumulativeCashflow],\n          fill: true,\n          backgroundColor: \"#92bed2\",\n          pointBackgroundColor: \"#3282bf\",\n          borderColor: \"#3282bf\",\n          pointHighlightStroke: \"#3282bf\",\n          borderCapStyle: \"butt\",\n        },\n      ],\n      labels: [...labels],\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              // Include a dollar sign in the ticks\n              callback: (value) => {\n                return currencyFormatter.format(value);\n              },\n            },\n          },\n        ],\n        xAxes: [\n          {\n            scaleLabel: {\n              display: true,\n              labelString: \"Month\",\n            },\n          },\n        ],\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          },\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n  return dataObject;\n};\n\nexport const cardParse = (data) => {\n  const summaryData = reducerHelper(data);\n\n  const dataObject = {\n    months: data.length,\n    rentalIncome: summaryData.rentalIncome,\n    opex: summaryData.opex,\n    mortgageInterest: summaryData.interest,\n    mortgagePayment: summaryData.loanInstallment,\n    profit: summaryData.postFinanceCashflow,\n  };\n\n  return dataObject;\n};\n\nexport const tableParse = (data) => {\n  let tableData = {\n    summaryCashflow: [],\n    annualCashflow: [],\n  };\n\n  for (let i = 1; i <= Math.ceil(data.length / 12); i++) {\n    const annualData = reducerHelper(data.filter((d) => d.year === i));\n\n    tableData.annualCashflow.push({\n      year: i,\n      acquisitionCosts: -annualData.purchasePrice - annualData.initialCosts,\n      rentalIncome: annualData.rentalIncome,\n      opex: -annualData.opex,\n      netSale: annualData.grossRealisation - annualData.sellingCost,\n      preFinanceCashflow: annualData.preFinanceCashflow,\n      debtUse: annualData.debtUse,\n      equityUse: -annualData.equityUse,\n      fundingCost: -annualData.loanInstallment - annualData.principalRepayment,\n      postFinanceCashflow: annualData.postFinanceCashflow,\n      totalIncome: annualData.rentalIncome + annualData.grossRealisation,\n      totalCost:\n        -annualData.equityUse -\n        annualData.initialCosts -\n        annualData.opex -\n        annualData.sellingCost -\n        annualData.loanInstallment -\n        annualData.principalRepayment,\n    });\n  }\n\n  const summaryData = reducerHelper(data);\n\n  tableData.summaryCashflow.push({\n    year: null,\n    acquisitionCosts: -summaryData.purchasePrice - summaryData.initialCosts,\n    rentalIncome: summaryData.rentalIncome,\n    opex: -summaryData.opex,\n    netSale: summaryData.grossRealisation - summaryData.sellingCost,\n    preFinanceCashflow: summaryData.preFinanceCashflow,\n    debtUse: summaryData.debtUse,\n    equityUse: -summaryData.equityUse,\n    fundingCost: -summaryData.loanInstallment - summaryData.principalRepayment,\n    postFinanceCashflow: summaryData.postFinanceCashflow,\n    totalIncome: summaryData.rentalIncome + summaryData.grossRealisation,\n    totalCost:\n      -summaryData.equityUse -\n      summaryData.initialCosts -\n      summaryData.opex -\n      summaryData.sellingCost -\n      summaryData.loanInstallment -\n      summaryData.principalRepayment,\n  });\n  return tableData;\n};\n\nexport const occupierInvestorMOCCalculation = (data) => {\n  const summaryData = data.reduce((accumulator, item) => {\n    Object.keys(item).forEach((key) => {\n      accumulator[key] = (accumulator[key] || 0) + item[key];\n    });\n    return accumulator;\n  }, []);\n\n  const netProfit = summaryData.postFinanceCashflow;\n  const cost =\n    summaryData.purchasePrice +\n    summaryData.initialCosts +\n    summaryData.opex +\n    summaryData.loanInstallment +\n    summaryData.sellingCost;\n\n  return netProfit / cost;\n};\n"]},"metadata":{},"sourceType":"module"}