{"ast":null,"code":"import dashboardService from \"../services/dashboard\";\nconst initialData = {\n  housePrice: 1000000,\n  deposit: 200000,\n  loanType: \"principalAndInterest\",\n  interestRate: 3.5,\n  homeloanTerm: 30,\n  overPayments: [{}],\n  investmentPeriod: 15,\n  sellingCosts: 3,\n  capitalGrowth: 3.5,\n  upfrontCosts: 3,\n  recurringCosts: 1000,\n  rentalYield: 3,\n  investor: false,\n  inflation: 3\n};\nlet initialState = {\n  isFetching: false,\n  preSave: false,\n  data: [initalData]\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state,\n        isFetching: true\n      };\n\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state,\n        isFetching: false,\n        preSave: false\n      };\n\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{\n          values: action.data\n        }]\n      };\n\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state,\n        preSave: true\n      };\n\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...action.data]\n      };\n\n    case \"GET_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [action.data]\n      };\n\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data]\n      };\n\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter(d => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data]\n      };\n\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter(d => d._id !== action.id)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboards = await dashboardService.getAllDash();\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboard = await dashboardService.getDash(id);\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const testDashboard = dashboard => {\n  return dispatch => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard\n    });\n  };\n};\nexport const preSaveDashboard = () => {\n  return dispatch => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\"\n    });\n  };\n};\nexport const saveDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const updateDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const deleteDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      await dashboardService.removeDash(id);\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport default dashboardReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/dashboardReducer.js"],"names":["dashboardService","initialData","housePrice","deposit","loanType","interestRate","homeloanTerm","overPayments","investmentPeriod","sellingCosts","capitalGrowth","upfrontCosts","recurringCosts","rentalYield","investor","inflation","initialState","isFetching","preSave","data","initalData","dashboardReducer","state","action","type","values","dashboardList","filter","d","_id","id","getDashboards","dispatch","dashboards","getAllDash","e","content","message","response","error","getDashboard","dashboard","getDash","testDashboard","preSaveDashboard","saveDashboard","dashboardObject","newDash","saveDash","updateDashboard","updateDash","deleteDashboard","removeDash"],"mappings":"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","sourcesContent":["import dashboardService from \"../services/dashboard\";\n\nconst initialData = {\n  housePrice: 1000000,\n  deposit: 200000,\n  loanType: \"principalAndInterest\",\n  interestRate: 3.5,\n  homeloanTerm: 30,\n  overPayments: [{}],\n  investmentPeriod: 15,\n  sellingCosts: 3,\n  capitalGrowth: 3.5,\n  upfrontCosts: 3,\n  recurringCosts: 1000,\n  rentalYield: 3,\n  investor: false,\n  inflation: 3,\n};\n\nlet initialState = { isFetching: false, preSave: false, data: [initalData] };\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state, isFetching: true };\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state, isFetching: false, preSave: false };\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{ values: action.data }],\n      };\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state, preSave: true };\n    case \"INIT_DASHBOARDS\":\n      return { isFetching: false, preSave: false, data: [...action.data] };\n    case \"GET_DASHBOARD\":\n      return { isFetching: false, preSave: false, data: [action.data] };\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data],\n      };\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter((d) => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data],\n      };\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter((d) => d._id !== action.id)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboards = await dashboardService.getAllDash();\n\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const getDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboard = await dashboardService.getDash(id);\n\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const testDashboard = (dashboard) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard,\n    });\n  };\n};\n\nexport const preSaveDashboard = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\",\n    });\n  };\n};\n\nexport const saveDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const updateDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const deleteDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      await dashboardService.removeDash(id);\n\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport default dashboardReducer;\n"]},"metadata":{},"sourceType":"module"}