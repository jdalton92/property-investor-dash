{"ast":null,"code":"import * as sCurveData from \"../static/sCurve.json\";\nimport { currencyFormatter, reducerHelper } from \"./dashboardHelper\";\nexport const developerCalculation = ({\n  acquisitionPrice,\n  acquisitionCosts,\n  dwellings,\n  constructionCostPerDwelling,\n  designFees,\n  constructionContingency,\n  statutoryFees,\n  constructionDuration,\n  planningAndDesign,\n  revenuePerDwelling,\n  sellingCosts,\n  investmentPeriod,\n  recurringCosts,\n  rentalYield,\n  initialEquity,\n  loanType,\n  interestRate,\n  loanTerm,\n  overPayments,\n  capitalGrowth,\n  constructionCostGrowth\n}) => {\n  // If value undefined then default to zero\n  // All other inputs are required\n  if (!designFees) {\n    designFees = 0;\n  }\n\n  if (!investmentPeriod) {\n    investmentPeriod = 0;\n  }\n\n  if (!statutoryFees) {\n    statutoryFees = 0;\n  }\n\n  if (!sellingCosts) {\n    sellingCosts = 0;\n  }\n\n  if (!recurringCosts) {\n    recurringCosts = 0;\n  }\n\n  if (!capitalGrowth) {\n    capitalGrowth = 0;\n  }\n\n  if (!constructionCostGrowth) {\n    constructionCostGrowth = 0;\n  }\n\n  if (!overPayments) {\n    overPayments = [{}];\n  }\n\n  if (!acquisitionCosts) {\n    acquisitionCosts = 0;\n  } //Initialise constant variables\n\n\n  const deliveryPhase = planningAndDesign + constructionDuration;\n  const investmentEnd = planningAndDesign + constructionDuration + investmentPeriod * 12;\n  const loanEnd = planningAndDesign + constructionDuration + loanTerm * 12;\n  const sCurveRef = constructionDuration - 1;\n  const totalConstructionCost = dwellings * constructionCostPerDwelling * Math.pow(1 + constructionCostGrowth / 100 / 12, planningAndDesign + Math.ceil(constructionDuration / 2) - 1 //escalate construction costs to middle of construction period\n  );\n  const grossSale = dwellings * revenuePerDwelling * Math.pow(1 + capitalGrowth / 100 / 12, deliveryPhase + investmentPeriod * 12 - 1); //Initalise finance variables\n\n  let cumulativeFundableCosts = 0;\n  const t = investmentEnd;\n  const r = interestRate / 100;\n  let closingBalance = 0; //Initialise summary output\n\n  let monthSummary = []; //Master Loop over investment period\n\n  for (let i = 0; i < t; i++) {\n    //Initialise Flags\n    const constFlag = i > planningAndDesign - 1 && i < deliveryPhase;\n    const deliveryFlag = i < deliveryPhase;\n    const investFlag = i > deliveryPhase - 1 && i < investmentEnd; //Acquisition Costs\n\n    const acquisition = i === planningAndDesign ? acquisitionPrice * Math.pow(1 + capitalGrowth / 100 / 12, planningAndDesign) : null;\n    const initialCosts = i === planningAndDesign ? acquisitionCosts / 100 * acquisition : null; //Delivery Period Costs\n\n    const sCurve = !constFlag ? null : constructionDuration > 50 ? 1 / constructionDuration : sCurveData.default[sCurveRef][constructionDuration.toString()][i - planningAndDesign];\n    const constructionCost = constFlag ? totalConstructionCost * parseFloat(sCurve) : null;\n    const professionalFees = deliveryFlag ? designFees / 100 * totalConstructionCost / deliveryPhase : null;\n    const statutoryCosts = i === planningAndDesign ? statutoryFees / 100 * totalConstructionCost : null;\n    const contingency = constFlag ? constructionContingency / 100 * constructionCost : null; //Revenues & Investment Period Costs\n\n    const grossRealisation = i === investmentEnd - 1 ? grossSale : null;\n    const sellingCost = grossRealisation * sellingCosts / 100;\n    const rentalIncome = investFlag ? dwellings * revenuePerDwelling * Math.pow(1 + capitalGrowth / 100 / 12, i) * rentalYield / 100 / 12 : null;\n    const opex = investFlag ? recurringCosts / 100 * rentalIncome : null; //Finance costs\n\n    const fundableCosts = acquisition + initialCosts + constructionCost + professionalFees + statutoryCosts + contingency;\n    cumulativeFundableCosts += fundableCosts;\n    const equitySource = cumulativeFundableCosts < initialEquity ? fundableCosts : cumulativeFundableCosts - initialEquity < fundableCosts ? fundableCosts - (cumulativeFundableCosts - initialEquity) : null;\n    const equityWithdraw = i === investmentEnd - 1 ? initialEquity : null;\n    const debtSource = cumulativeFundableCosts > initialEquity ? cumulativeFundableCosts - initialEquity < fundableCosts ? cumulativeFundableCosts - initialEquity : fundableCosts : null;\n    const openingBalance = closingBalance;\n    const openingBalanceInterest = openingBalance * (1 + r / 12);\n    const n = deliveryPhase + loanTerm * 12 - i;\n    let loanPayment = 0;\n\n    if (i > deliveryPhase - 1 && i < loanEnd) {\n      loanPayment = loanType === \"interestOnly\" ? openingBalance * r / 12 : Math.min(r / 12 * openingBalance * Math.pow(1 + r / 12, n) / (Math.pow(1 + r / 12, n) - 1), openingBalanceInterest);\n    }\n\n    const annualOverPayment = overPayments.filter(p => parseInt(p.year) * 12 === i + 1).reduce((a, b) => a + b.payment, 0);\n    const loanInstallment = loanPayment + annualOverPayment;\n    const principalRepayment = i === loanEnd - 1 || i === investmentEnd - 1 ? openingBalanceInterest - loanInstallment : null;\n    closingBalance = openingBalanceInterest + debtSource - loanInstallment - principalRepayment; //Summary cashflow items\n\n    const preFinanceCashflow = -acquisition - initialCosts - constructionCost - professionalFees - statutoryCosts - contingency + grossRealisation - sellingCost + rentalIncome - opex;\n    const postFinanceCashflow = preFinanceCashflow + debtSource - loanInstallment - principalRepayment; //Add month summary object to summary array\n\n    monthSummary.push({\n      month: i + 1,\n      year: Math.ceil((i + 1) / 12),\n      acquisition,\n      initialCosts,\n      constructionCost,\n      professionalFees,\n      statutoryCosts,\n      contingency,\n      grossRealisation,\n      sellingCost,\n      rentalIncome,\n      opex,\n      preFinanceCashflow,\n      openingBalance,\n      interest: openingBalanceInterest - openingBalance,\n      loanInstallment,\n      principalRepayment,\n      closingBalance,\n      equitySource,\n      equityWithdraw,\n      debtSource,\n      postFinanceCashflow\n    });\n  }\n\n  return monthSummary;\n};\nexport const cumulativeChartParse = data => {\n  const labels = data.map(c => c.month);\n  const cumulativePreFinanceCashflow = data.reduce((acc, c) => {\n    acc.push(c.preFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const cumulativePostFinanceCashflow = data.reduce((acc, c) => {\n    acc.push(c.postFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const dataObject = {\n    data: {\n      postFinance: {\n        datasets: [{\n          data: [...cumulativePostFinanceCashflow],\n          fill: true,\n          backgroundColor: \"#92bed2\",\n          pointBackgroundColor: \"#3282bf\",\n          borderColor: \"#3282bf\",\n          pointHighlightStroke: \"#3282bf\",\n          borderCapStyle: \"butt\"\n        }],\n        labels: [...labels]\n      },\n      preFinance: {\n        datasets: [{\n          data: [...cumulativePreFinanceCashflow],\n          fill: true,\n          backgroundColor: \"#92bed2\",\n          pointBackgroundColor: \"#3282bf\",\n          borderColor: \"#3282bf\",\n          pointHighlightStroke: \"#3282bf\",\n          borderCapStyle: \"butt\"\n        }],\n        labels: [...labels]\n      }\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [{\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: value => {\n              return currencyFormatter.format(value);\n            }\n          }\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: \"Month\"\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          },\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          }\n        }\n      },\n      legend: {\n        display: false\n      }\n    }\n  };\n  return dataObject;\n};\nexport const annualChartParse = data => {\n  //Get annual cashflow\n  const {\n    annualCashflow\n  } = tableParse(data); //Transform annual cashflow from objects of annual\n  //cashflow summary, to an object with each cost item\n  //an array of each year sum\n\n  let annualData = {\n    acquisitionCosts: [],\n    TDC: [],\n    NOI: [],\n    netSale: []\n  };\n  annualCashflow.forEach(cf => {\n    for (let [key, value] of Object.entries(cf)) {\n      if (!annualData[key]) continue;\n      annualData[key].push(value);\n    }\n  }); //Transform annualData into ChartJS data structure\n\n  const datasets = [];\n  const dataLabels = [\"Acquisition Costs\", \"Total Development Costs\", \"Net Rental Income\", \"Net Sale Proceeds\"];\n  const dataColors = [\"rgba(8, 65, 92, 0.6)\", \"rgba(107, 129, 140, 0.6)\", \"rgba(241, 192, 152, 0.6)\", \"rgba(238, 229, 233, 0.6)\"];\n  let i = 0;\n\n  for (let value of Object.values(annualData)) {\n    datasets.push({\n      label: dataLabels[i],\n      data: value,\n      backgroundColor: dataColors[i]\n    });\n    i++;\n  } //x-axis labels\n\n\n  const labels = annualCashflow.map(c => c.year); //ChartJS data object for config of stacked bar chart\n\n  const dataObject = {\n    data: {\n      labels: [...labels],\n      datasets: [...datasets]\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [{\n          stacked: true,\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: value => {\n              return currencyFormatter.format(value);\n            }\n          }\n        }],\n        xAxes: [{\n          stacked: true,\n          scaleLabel: {\n            display: true,\n            labelString: \"Year\"\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            return `${data.datasets[tooltipItem.datasetIndex].label} ${currencyFormatter.format(tooltipItem.yLabel)}`;\n          },\n          beforeTitle: (tooltipItem, object) => {\n            return \"Year\";\n          }\n        }\n      }\n    }\n  };\n  return dataObject;\n};\nexport const pieChartParse = data => {\n  const totalData = reducerHelper(data);\n  const preFinanceDataset = [Math.round(totalData.acquisition), Math.round(totalData.initialCosts), Math.round(totalData.constructionCost), Math.round(totalData.professionalFees), Math.round(totalData.statutoryCosts), Math.round(totalData.contingency), Math.round(totalData.sellingCost), Math.round(totalData.opex)];\n  const postFinanceDataset = preFinanceDataset.concat(Math.round(totalData.interest));\n  const preFinanceLabels = [\"Acquisition\", \"Acquisition Costs\", \"Construction Costs\", \"Planning & Design Fees\", \"Development Levy\", \"Contingency\", \"Selling Costs\", \"Operating Costs\"];\n  const postFinanceLabels = preFinanceLabels.concat(\"Interest on Debt\");\n  const dataObject = {\n    data: {\n      postFinance: {\n        datasets: [{\n          data: [...postFinanceDataset]\n        }],\n        labels: [...postFinanceLabels]\n      },\n      preFinance: {\n        datasets: [{\n          data: [...preFinanceDataset]\n        }],\n        labels: [...preFinanceLabels]\n      }\n    },\n    options: {\n      maintainAspectRatio: false,\n      legend: {\n        position: \"right\"\n      }\n    }\n  };\n  return dataObject;\n};\nexport const tableParse = data => {\n  let tableData = {\n    summaryCashflow: [],\n    annualCashflow: []\n  };\n\n  for (let i = 1; i <= Math.ceil(data.length / 12); i++) {\n    const annualData = reducerHelper(data.filter(d => d.year === i));\n    tableData.annualCashflow.push({\n      year: i,\n      acquisitionCosts: -annualData.acquisition - annualData.initialCosts,\n      TDC: -annualData.constructionCost - annualData.professionalFees - annualData.statutoryCosts - annualData.contingency,\n      NOI: annualData.rentalIncome - annualData.opex,\n      netSale: annualData.grossRealisation - annualData.sellingCost,\n      preFinanceCashflow: annualData.preFinanceCashflow,\n      loanCosts: -annualData.loanInstallment - annualData.principalRepayment,\n      postFinanceCashflow: annualData.postFinanceCashflow,\n      totalIncome: annualData.rentalIncome + annualData.grossRealisation,\n      preFinanceTotalCost: -annualData.acquisition - annualData.initialCosts - annualData.constructionCost - annualData.professionalFees - annualData.statutoryCosts - annualData.contingency - annualData.opex - annualData.sellingCost,\n      debtSource: annualData.debtSource,\n      postFinanceTotalCost: -annualData.acquisition - annualData.initialCosts - annualData.constructionCost - annualData.professionalFees - annualData.statutoryCosts - annualData.contingency - annualData.opex - annualData.sellingCost - annualData.loanInstallment - annualData.principalRepayment\n    });\n  }\n\n  const summaryData = reducerHelper(data);\n  tableData.summaryCashflow.push({\n    year: null,\n    totalRevenue: summaryData.grossRealisation + summaryData.rentalIncome,\n    totalCostsPreFinance: summaryData.acquisition + summaryData.initialCosts + summaryData.constructionCost + summaryData.professionalFees + summaryData.statutoryCosts + summaryData.contingency + summaryData.opex + summaryData.sellingCost,\n    totalCostsPostFinance: summaryData.acquisition + summaryData.initialCosts + summaryData.constructionCost + summaryData.professionalFees + summaryData.statutoryCosts + summaryData.contingency + summaryData.opex + summaryData.sellingCost + summaryData.loanInstallment,\n    acquisitionCosts: -summaryData.acquisition - summaryData.initialCosts,\n    TDC: -summaryData.constructionCost - summaryData.professionalFees - summaryData.statutoryCosts - summaryData.contingency,\n    NOI: summaryData.rentalIncome - summaryData.opex,\n    netSale: summaryData.grossRealisation - summaryData.sellingCost,\n    preFinanceCashflow: summaryData.preFinanceCashflow,\n    loanCosts: -summaryData.loanInstallment - summaryData.principalRepayment,\n    postFinanceCashflow: summaryData.postFinanceCashflow,\n    totalIncome: summaryData.rentalIncome + summaryData.grossRealisation,\n    preFinanceTotalCost: -summaryData.acquisition - summaryData.initialCosts - summaryData.constructionCost - summaryData.professionalFees - summaryData.statutoryCosts - summaryData.contingency - summaryData.opex - summaryData.sellingCost,\n    debtSource: summaryData.debtSource,\n    postFinanceTotalCost: -summaryData.acquisition - summaryData.initialCosts - summaryData.constructionCost - summaryData.professionalFees - summaryData.statutoryCosts - summaryData.contingency - summaryData.opex - summaryData.sellingCost - summaryData.loanInstallment - summaryData.principalRepayment\n  });\n  return tableData;\n};\nexport const developerMOCCalculation = data => {\n  const summaryData = reducerHelper(data);\n  const preProfit = summaryData.preFinanceCashflow;\n  const postProfit = summaryData.postFinanceCashflow;\n  const preCost = summaryData.acquisition + summaryData.initialCosts + summaryData.constructionCost + summaryData.professionalFees + summaryData.statutoryCosts + summaryData.contingency + summaryData.sellingCost;\n  const postCost = preCost + summaryData.loanInstallment;\n  return {\n    preFinance: preProfit / preCost,\n    postFinance: postProfit / postCost\n  };\n};\nexport const fundingChartParse = data => {\n  const labels = data.map(c => c.month);\n  const cumulativeEquity = data.reduce((acc, c) => {\n    acc.push(Math.round(c.equitySource - c.equityWithdraw) + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const cumulativeDebt = data.reduce((acc, c) => {\n    acc.push(Math.round(c.debtSource + c.interest - c.loanInstallment - c.principalRepayment) + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const dataObject = {\n    data: {\n      datasets: [{\n        data: [...cumulativeEquity],\n        label: \"Equity\",\n        fill: true,\n        backgroundColor: \"#8fa8c8\",\n        pointBackgroundColor: \"#75539e\",\n        borderColor: \"#75539e\",\n        pointHighlightStroke: \"#75539e\",\n        borderCapStyle: \"butt\"\n      }, {\n        data: [...cumulativeDebt],\n        label: \"Debt\",\n        fill: true,\n        backgroundColor: \"#92bed2\",\n        pointBackgroundColor: \"#3282bf\",\n        borderColor: \"#3282bf\",\n        pointHighlightStroke: \"#3282bf\",\n        borderCapStyle: \"butt\"\n      }],\n      labels: [...labels]\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [{\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: value => {\n              return currencyFormatter.format(value);\n            }\n          },\n          stacked: true\n        }],\n        xAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: \"Month\"\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          },\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          }\n        }\n      }\n    }\n  };\n  return dataObject;\n};","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/utils/developerDashboardHelper.js"],"names":["sCurveData","currencyFormatter","reducerHelper","developerCalculation","acquisitionPrice","acquisitionCosts","dwellings","constructionCostPerDwelling","designFees","constructionContingency","statutoryFees","constructionDuration","planningAndDesign","revenuePerDwelling","sellingCosts","investmentPeriod","recurringCosts","rentalYield","initialEquity","loanType","interestRate","loanTerm","overPayments","capitalGrowth","constructionCostGrowth","deliveryPhase","investmentEnd","loanEnd","sCurveRef","totalConstructionCost","Math","pow","ceil","grossSale","cumulativeFundableCosts","t","r","closingBalance","monthSummary","i","constFlag","deliveryFlag","investFlag","acquisition","initialCosts","sCurve","default","toString","constructionCost","parseFloat","professionalFees","statutoryCosts","contingency","grossRealisation","sellingCost","rentalIncome","opex","fundableCosts","equitySource","equityWithdraw","debtSource","openingBalance","openingBalanceInterest","n","loanPayment","min","annualOverPayment","filter","p","parseInt","year","reduce","a","b","payment","loanInstallment","principalRepayment","preFinanceCashflow","postFinanceCashflow","push","month","interest","cumulativeChartParse","data","labels","map","c","cumulativePreFinanceCashflow","acc","length","cumulativePostFinanceCashflow","dataObject","postFinance","datasets","fill","backgroundColor","pointBackgroundColor","borderColor","pointHighlightStroke","borderCapStyle","preFinance","options","maintainAspectRatio","scales","yAxes","ticks","callback","value","format","xAxes","scaleLabel","display","labelString","tooltips","callbacks","beforeTitle","tooltipItem","object","label","yLabel","legend","annualChartParse","annualCashflow","tableParse","annualData","TDC","NOI","netSale","forEach","cf","key","Object","entries","dataLabels","dataColors","values","stacked","datasetIndex","pieChartParse","totalData","preFinanceDataset","round","postFinanceDataset","concat","preFinanceLabels","postFinanceLabels","position","tableData","summaryCashflow","d","loanCosts","totalIncome","preFinanceTotalCost","postFinanceTotalCost","summaryData","totalRevenue","totalCostsPreFinance","totalCostsPostFinance","developerMOCCalculation","preProfit","postProfit","preCost","postCost","fundingChartParse","cumulativeEquity","cumulativeDebt"],"mappings":"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","sourcesContent":["import * as sCurveData from \"../static/sCurve.json\";\nimport { currencyFormatter, reducerHelper } from \"./dashboardHelper\";\n\nexport const developerCalculation = ({\n  acquisitionPrice,\n  acquisitionCosts,\n  dwellings,\n  constructionCostPerDwelling,\n  designFees,\n  constructionContingency,\n  statutoryFees,\n  constructionDuration,\n  planningAndDesign,\n\n  revenuePerDwelling,\n  sellingCosts,\n  investmentPeriod,\n  recurringCosts,\n  rentalYield,\n\n  initialEquity,\n  loanType,\n  interestRate,\n  loanTerm,\n  overPayments,\n\n  capitalGrowth,\n  constructionCostGrowth,\n}) => {\n  // If value undefined then default to zero\n  // All other inputs are required\n  if (!designFees) {\n    designFees = 0;\n  }\n  if (!investmentPeriod) {\n    investmentPeriod = 0;\n  }\n  if (!statutoryFees) {\n    statutoryFees = 0;\n  }\n  if (!sellingCosts) {\n    sellingCosts = 0;\n  }\n  if (!recurringCosts) {\n    recurringCosts = 0;\n  }\n  if (!capitalGrowth) {\n    capitalGrowth = 0;\n  }\n  if (!constructionCostGrowth) {\n    constructionCostGrowth = 0;\n  }\n  if (!overPayments) {\n    overPayments = [{}];\n  }\n  if (!acquisitionCosts) {\n    acquisitionCosts = 0;\n  }\n  //Initialise constant variables\n  const deliveryPhase = planningAndDesign + constructionDuration;\n  const investmentEnd =\n    planningAndDesign + constructionDuration + investmentPeriod * 12;\n  const loanEnd = planningAndDesign + constructionDuration + loanTerm * 12;\n  const sCurveRef = constructionDuration - 1;\n  const totalConstructionCost =\n    dwellings *\n    constructionCostPerDwelling *\n    Math.pow(\n      1 + constructionCostGrowth / 100 / 12,\n      planningAndDesign + Math.ceil(constructionDuration / 2) - 1 //escalate construction costs to middle of construction period\n    );\n  const grossSale =\n    dwellings *\n    revenuePerDwelling *\n    Math.pow(\n      1 + capitalGrowth / 100 / 12,\n      deliveryPhase + investmentPeriod * 12 - 1\n    );\n\n  //Initalise finance variables\n  let cumulativeFundableCosts = 0;\n  const t = investmentEnd;\n  const r = interestRate / 100;\n  let closingBalance = 0;\n\n  //Initialise summary output\n  let monthSummary = [];\n\n  //Master Loop over investment period\n  for (let i = 0; i < t; i++) {\n    //Initialise Flags\n    const constFlag = i > planningAndDesign - 1 && i < deliveryPhase;\n    const deliveryFlag = i < deliveryPhase;\n    const investFlag = i > deliveryPhase - 1 && i < investmentEnd;\n\n    //Acquisition Costs\n    const acquisition =\n      i === planningAndDesign\n        ? acquisitionPrice *\n          Math.pow(1 + capitalGrowth / 100 / 12, planningAndDesign)\n        : null;\n\n    const initialCosts =\n      i === planningAndDesign ? (acquisitionCosts / 100) * acquisition : null;\n\n    //Delivery Period Costs\n    const sCurve = !constFlag\n      ? null\n      : constructionDuration > 50\n      ? 1 / constructionDuration\n      : sCurveData.default[sCurveRef][constructionDuration.toString()][\n          i - planningAndDesign\n        ];\n\n    const constructionCost = constFlag\n      ? totalConstructionCost * parseFloat(sCurve)\n      : null;\n\n    const professionalFees = deliveryFlag\n      ? ((designFees / 100) * totalConstructionCost) / deliveryPhase\n      : null;\n\n    const statutoryCosts =\n      i === planningAndDesign\n        ? (statutoryFees / 100) * totalConstructionCost\n        : null;\n\n    const contingency = constFlag\n      ? (constructionContingency / 100) * constructionCost\n      : null;\n\n    //Revenues & Investment Period Costs\n    const grossRealisation = i === investmentEnd - 1 ? grossSale : null;\n\n    const sellingCost = (grossRealisation * sellingCosts) / 100;\n\n    const rentalIncome = investFlag\n      ? (dwellings *\n          revenuePerDwelling *\n          Math.pow(1 + capitalGrowth / 100 / 12, i) *\n          rentalYield) /\n        100 /\n        12\n      : null;\n\n    const opex = investFlag ? (recurringCosts / 100) * rentalIncome : null;\n\n    //Finance costs\n    const fundableCosts =\n      acquisition +\n      initialCosts +\n      constructionCost +\n      professionalFees +\n      statutoryCosts +\n      contingency;\n\n    cumulativeFundableCosts += fundableCosts;\n\n    const equitySource =\n      cumulativeFundableCosts < initialEquity\n        ? fundableCosts\n        : cumulativeFundableCosts - initialEquity < fundableCosts\n        ? fundableCosts - (cumulativeFundableCosts - initialEquity)\n        : null;\n\n    const equityWithdraw = i === investmentEnd - 1 ? initialEquity : null;\n\n    const debtSource =\n      cumulativeFundableCosts > initialEquity\n        ? cumulativeFundableCosts - initialEquity < fundableCosts\n          ? cumulativeFundableCosts - initialEquity\n          : fundableCosts\n        : null;\n\n    const openingBalance = closingBalance;\n\n    const openingBalanceInterest = openingBalance * (1 + r / 12);\n\n    const n = deliveryPhase + loanTerm * 12 - i;\n    let loanPayment = 0;\n    if (i > deliveryPhase - 1 && i < loanEnd) {\n      loanPayment =\n        loanType === \"interestOnly\"\n          ? (openingBalance * r) / 12\n          : Math.min(\n              ((r / 12) * openingBalance * Math.pow(1 + r / 12, n)) /\n                (Math.pow(1 + r / 12, n) - 1),\n              openingBalanceInterest\n            );\n    }\n\n    const annualOverPayment = overPayments\n      .filter((p) => parseInt(p.year) * 12 === i + 1)\n      .reduce((a, b) => a + b.payment, 0);\n\n    const loanInstallment = loanPayment + annualOverPayment;\n\n    const principalRepayment =\n      i === loanEnd - 1 || i === investmentEnd - 1\n        ? openingBalanceInterest - loanInstallment\n        : null;\n\n    closingBalance =\n      openingBalanceInterest +\n      debtSource -\n      loanInstallment -\n      principalRepayment;\n\n    //Summary cashflow items\n    const preFinanceCashflow =\n      -acquisition -\n      initialCosts -\n      constructionCost -\n      professionalFees -\n      statutoryCosts -\n      contingency +\n      grossRealisation -\n      sellingCost +\n      rentalIncome -\n      opex;\n\n    const postFinanceCashflow =\n      preFinanceCashflow + debtSource - loanInstallment - principalRepayment;\n\n    //Add month summary object to summary array\n    monthSummary.push({\n      month: i + 1,\n      year: Math.ceil((i + 1) / 12),\n      acquisition,\n      initialCosts,\n      constructionCost,\n      professionalFees,\n      statutoryCosts,\n      contingency,\n      grossRealisation,\n      sellingCost,\n      rentalIncome,\n      opex,\n      preFinanceCashflow,\n      openingBalance,\n      interest: openingBalanceInterest - openingBalance,\n      loanInstallment,\n      principalRepayment,\n      closingBalance,\n      equitySource,\n      equityWithdraw,\n      debtSource,\n      postFinanceCashflow,\n    });\n  }\n  return monthSummary;\n};\n\nexport const cumulativeChartParse = (data) => {\n  const labels = data.map((c) => c.month);\n\n  const cumulativePreFinanceCashflow = data.reduce((acc, c) => {\n    acc.push(c.preFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0));\n    return acc;\n  }, []);\n  const cumulativePostFinanceCashflow = data.reduce((acc, c) => {\n    acc.push(\n      c.postFinanceCashflow + (acc.length > 0 ? acc[acc.length - 1] : 0)\n    );\n    return acc;\n  }, []);\n\n  const dataObject = {\n    data: {\n      postFinance: {\n        datasets: [\n          {\n            data: [...cumulativePostFinanceCashflow],\n            fill: true,\n            backgroundColor: \"#92bed2\",\n            pointBackgroundColor: \"#3282bf\",\n            borderColor: \"#3282bf\",\n            pointHighlightStroke: \"#3282bf\",\n            borderCapStyle: \"butt\",\n          },\n        ],\n        labels: [...labels],\n      },\n      preFinance: {\n        datasets: [\n          {\n            data: [...cumulativePreFinanceCashflow],\n            fill: true,\n            backgroundColor: \"#92bed2\",\n            pointBackgroundColor: \"#3282bf\",\n            borderColor: \"#3282bf\",\n            pointHighlightStroke: \"#3282bf\",\n            borderCapStyle: \"butt\",\n          },\n        ],\n        labels: [...labels],\n      },\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              // Include a dollar sign in the ticks\n              callback: (value) => {\n                return currencyFormatter.format(value);\n              },\n            },\n          },\n        ],\n        xAxes: [\n          {\n            scaleLabel: {\n              display: true,\n              labelString: \"Month\",\n            },\n          },\n        ],\n      },\n      tooltips: {\n        callbacks: {\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          },\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          },\n        },\n      },\n      legend: {\n        display: false,\n      },\n    },\n  };\n  return dataObject;\n};\n\nexport const annualChartParse = (data) => {\n  //Get annual cashflow\n  const { annualCashflow } = tableParse(data);\n\n  //Transform annual cashflow from objects of annual\n  //cashflow summary, to an object with each cost item\n  //an array of each year sum\n  let annualData = {\n    acquisitionCosts: [],\n    TDC: [],\n    NOI: [],\n    netSale: [],\n  };\n\n  annualCashflow.forEach((cf) => {\n    for (let [key, value] of Object.entries(cf)) {\n      if (!annualData[key]) continue;\n      annualData[key].push(value);\n    }\n  });\n\n  //Transform annualData into ChartJS data structure\n  const datasets = [];\n  const dataLabels = [\n    \"Acquisition Costs\",\n    \"Total Development Costs\",\n    \"Net Rental Income\",\n    \"Net Sale Proceeds\",\n  ];\n  const dataColors = [\n    \"rgba(8, 65, 92, 0.6)\",\n    \"rgba(107, 129, 140, 0.6)\",\n    \"rgba(241, 192, 152, 0.6)\",\n    \"rgba(238, 229, 233, 0.6)\",\n  ];\n  let i = 0;\n  for (let value of Object.values(annualData)) {\n    datasets.push({\n      label: dataLabels[i],\n      data: value,\n      backgroundColor: dataColors[i],\n    });\n    i++;\n  }\n\n  //x-axis labels\n  const labels = annualCashflow.map((c) => c.year);\n\n  //ChartJS data object for config of stacked bar chart\n  const dataObject = {\n    data: {\n      labels: [...labels],\n      datasets: [...datasets],\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [\n          {\n            stacked: true,\n            ticks: {\n              // Include a dollar sign in the ticks\n              callback: (value) => {\n                return currencyFormatter.format(value);\n              },\n            },\n          },\n        ],\n        xAxes: [\n          {\n            stacked: true,\n            scaleLabel: {\n              display: true,\n              labelString: \"Year\",\n            },\n          },\n        ],\n      },\n      tooltips: {\n        callbacks: {\n          label: (tooltipItem, data) => {\n            return `${\n              data.datasets[tooltipItem.datasetIndex].label\n            } ${currencyFormatter.format(tooltipItem.yLabel)}`;\n          },\n          beforeTitle: (tooltipItem, object) => {\n            return \"Year\";\n          },\n        },\n      },\n    },\n  };\n  return dataObject;\n};\n\nexport const pieChartParse = (data) => {\n  const totalData = reducerHelper(data);\n\n  const preFinanceDataset = [\n    Math.round(totalData.acquisition),\n    Math.round(totalData.initialCosts),\n    Math.round(totalData.constructionCost),\n    Math.round(totalData.professionalFees),\n    Math.round(totalData.statutoryCosts),\n    Math.round(totalData.contingency),\n    Math.round(totalData.sellingCost),\n    Math.round(totalData.opex),\n  ];\n\n  const postFinanceDataset = preFinanceDataset.concat(\n    Math.round(totalData.interest)\n  );\n\n  const preFinanceLabels = [\n    \"Acquisition\",\n    \"Acquisition Costs\",\n    \"Construction Costs\",\n    \"Planning & Design Fees\",\n    \"Development Levy\",\n    \"Contingency\",\n    \"Selling Costs\",\n    \"Operating Costs\",\n  ];\n\n  const postFinanceLabels = preFinanceLabels.concat(\"Interest on Debt\");\n\n  const dataObject = {\n    data: {\n      postFinance: {\n        datasets: [\n          {\n            data: [...postFinanceDataset],\n          },\n        ],\n        labels: [...postFinanceLabels],\n      },\n      preFinance: {\n        datasets: [\n          {\n            data: [...preFinanceDataset],\n          },\n        ],\n        labels: [...preFinanceLabels],\n      },\n    },\n    options: {\n      maintainAspectRatio: false,\n      legend: {\n        position: \"right\",\n      },\n    },\n  };\n  return dataObject;\n};\n\nexport const tableParse = (data) => {\n  let tableData = {\n    summaryCashflow: [],\n    annualCashflow: [],\n  };\n\n  for (let i = 1; i <= Math.ceil(data.length / 12); i++) {\n    const annualData = reducerHelper(data.filter((d) => d.year === i));\n    tableData.annualCashflow.push({\n      year: i,\n      acquisitionCosts: -annualData.acquisition - annualData.initialCosts,\n      TDC:\n        -annualData.constructionCost -\n        annualData.professionalFees -\n        annualData.statutoryCosts -\n        annualData.contingency,\n      NOI: annualData.rentalIncome - annualData.opex,\n      netSale: annualData.grossRealisation - annualData.sellingCost,\n      preFinanceCashflow: annualData.preFinanceCashflow,\n      loanCosts: -annualData.loanInstallment - annualData.principalRepayment,\n      postFinanceCashflow: annualData.postFinanceCashflow,\n      totalIncome: annualData.rentalIncome + annualData.grossRealisation,\n      preFinanceTotalCost:\n        -annualData.acquisition -\n        annualData.initialCosts -\n        annualData.constructionCost -\n        annualData.professionalFees -\n        annualData.statutoryCosts -\n        annualData.contingency -\n        annualData.opex -\n        annualData.sellingCost,\n      debtSource: annualData.debtSource,\n      postFinanceTotalCost:\n        -annualData.acquisition -\n        annualData.initialCosts -\n        annualData.constructionCost -\n        annualData.professionalFees -\n        annualData.statutoryCosts -\n        annualData.contingency -\n        annualData.opex -\n        annualData.sellingCost -\n        annualData.loanInstallment -\n        annualData.principalRepayment,\n    });\n  }\n\n  const summaryData = reducerHelper(data);\n\n  tableData.summaryCashflow.push({\n    year: null,\n    totalRevenue: summaryData.grossRealisation + summaryData.rentalIncome,\n    totalCostsPreFinance:\n      summaryData.acquisition +\n      summaryData.initialCosts +\n      summaryData.constructionCost +\n      summaryData.professionalFees +\n      summaryData.statutoryCosts +\n      summaryData.contingency +\n      summaryData.opex +\n      summaryData.sellingCost,\n    totalCostsPostFinance:\n      summaryData.acquisition +\n      summaryData.initialCosts +\n      summaryData.constructionCost +\n      summaryData.professionalFees +\n      summaryData.statutoryCosts +\n      summaryData.contingency +\n      summaryData.opex +\n      summaryData.sellingCost +\n      summaryData.loanInstallment,\n    acquisitionCosts: -summaryData.acquisition - summaryData.initialCosts,\n    TDC:\n      -summaryData.constructionCost -\n      summaryData.professionalFees -\n      summaryData.statutoryCosts -\n      summaryData.contingency,\n    NOI: summaryData.rentalIncome - summaryData.opex,\n    netSale: summaryData.grossRealisation - summaryData.sellingCost,\n    preFinanceCashflow: summaryData.preFinanceCashflow,\n    loanCosts: -summaryData.loanInstallment - summaryData.principalRepayment,\n    postFinanceCashflow: summaryData.postFinanceCashflow,\n    totalIncome: summaryData.rentalIncome + summaryData.grossRealisation,\n    preFinanceTotalCost:\n      -summaryData.acquisition -\n      summaryData.initialCosts -\n      summaryData.constructionCost -\n      summaryData.professionalFees -\n      summaryData.statutoryCosts -\n      summaryData.contingency -\n      summaryData.opex -\n      summaryData.sellingCost,\n    debtSource: summaryData.debtSource,\n    postFinanceTotalCost:\n      -summaryData.acquisition -\n      summaryData.initialCosts -\n      summaryData.constructionCost -\n      summaryData.professionalFees -\n      summaryData.statutoryCosts -\n      summaryData.contingency -\n      summaryData.opex -\n      summaryData.sellingCost -\n      summaryData.loanInstallment -\n      summaryData.principalRepayment,\n  });\n  return tableData;\n};\n\nexport const developerMOCCalculation = (data) => {\n  const summaryData = reducerHelper(data);\n\n  const preProfit = summaryData.preFinanceCashflow;\n  const postProfit = summaryData.postFinanceCashflow;\n  const preCost =\n    summaryData.acquisition +\n    summaryData.initialCosts +\n    summaryData.constructionCost +\n    summaryData.professionalFees +\n    summaryData.statutoryCosts +\n    summaryData.contingency +\n    summaryData.sellingCost;\n  const postCost = preCost + summaryData.loanInstallment;\n\n  return {\n    preFinance: preProfit / preCost,\n    postFinance: postProfit / postCost,\n  };\n};\n\nexport const fundingChartParse = (data) => {\n  const labels = data.map((c) => c.month);\n  const cumulativeEquity = data.reduce((acc, c) => {\n    acc.push(\n      Math.round(c.equitySource - c.equityWithdraw) +\n        (acc.length > 0 ? acc[acc.length - 1] : 0)\n    );\n    return acc;\n  }, []);\n  const cumulativeDebt = data.reduce((acc, c) => {\n    acc.push(\n      Math.round(\n        c.debtSource + c.interest - c.loanInstallment - c.principalRepayment\n      ) + (acc.length > 0 ? acc[acc.length - 1] : 0)\n    );\n    return acc;\n  }, []);\n\n  const dataObject = {\n    data: {\n      datasets: [\n        {\n          data: [...cumulativeEquity],\n          label: \"Equity\",\n          fill: true,\n          backgroundColor: \"#8fa8c8\",\n          pointBackgroundColor: \"#75539e\",\n          borderColor: \"#75539e\",\n          pointHighlightStroke: \"#75539e\",\n          borderCapStyle: \"butt\",\n        },\n        {\n          data: [...cumulativeDebt],\n          label: \"Debt\",\n          fill: true,\n          backgroundColor: \"#92bed2\",\n          pointBackgroundColor: \"#3282bf\",\n          borderColor: \"#3282bf\",\n          pointHighlightStroke: \"#3282bf\",\n          borderCapStyle: \"butt\",\n        },\n      ],\n      labels: [...labels],\n    },\n    options: {\n      maintainAspectRatio: false,\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              // Include a dollar sign in the ticks\n              callback: (value) => {\n                return currencyFormatter.format(value);\n              },\n            },\n            stacked: true,\n          },\n        ],\n        xAxes: [\n          {\n            scaleLabel: {\n              display: true,\n              labelString: \"Month\",\n            },\n          },\n        ],\n      },\n      tooltips: {\n        callbacks: {\n          beforeTitle: (tooltipItem, object) => {\n            return \"Month\";\n          },\n          label: (tooltipItem, data) => {\n            return currencyFormatter.format(tooltipItem.yLabel);\n          },\n        },\n      },\n    },\n  };\n  return dataObject;\n};\n"]},"metadata":{},"sourceType":"module"}