{"ast":null,"code":"import dashboardService from \"../services/dashboard\";\nlet initialState = {\n  isFetching: false,\n  preSave: false,\n  dashboards: [],\n  dashboard: {}\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state,\n        isFetching: true\n      };\n\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state,\n        isFetching: false,\n        preSave: false\n      };\n\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{\n          values: action.data\n        }]\n      };\n\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state,\n        preSave: true\n      };\n\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...action.data]\n      };\n\n    case \"GET_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [action.data]\n      };\n\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data]\n      };\n\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter(d => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data]\n      };\n\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter(d => d._id !== action.id)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboards = await dashboardService.getAllDash();\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const getDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboard = await dashboardService.getDash(id);\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const testDashboard = dashboard => {\n  return dispatch => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard\n    });\n  };\n};\nexport const preSaveDashboard = () => {\n  return dispatch => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\"\n    });\n  };\n};\nexport const saveDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const updateDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const deleteDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      await dashboardService.removeDash(id);\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport default dashboardReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/dashboardReducer.js"],"names":["dashboardService","initialState","isFetching","preSave","dashboards","dashboard","dashboardReducer","state","action","type","data","values","dashboardList","filter","d","_id","id","getDashboards","dispatch","getAllDash","e","content","message","response","error","getDashboard","getDash","testDashboard","preSaveDashboard","saveDashboard","dashboardObject","newDash","saveDash","updateDashboard","updateDash","deleteDashboard","removeDash"],"mappings":"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","sourcesContent":["import dashboardService from \"../services/dashboard\";\n\nlet initialState = { isFetching: false, preSave: false, dashboards: [], dashboard: {} };\n\nconst dashboardReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      return { ...state, isFetching: true };\n    case \"DASHBOARD_REQUEST_FAIL\":\n      return { ...state, isFetching: false, preSave: false };\n    case \"TEST_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: true,\n        data: [{ values: action.data }],\n      };\n    case \"PRE_SAVE_DASHBOARD\":\n      return { ...state, preSave: true };\n    case \"INIT_DASHBOARDS\":\n      return { isFetching: false, preSave: false, data: [...action.data] };\n    case \"GET_DASHBOARD\":\n      return { isFetching: false, preSave: false, data: [action.data] };\n    case \"SAVE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data, action.data],\n      };\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter((d) => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...dashboardList, action.data],\n      };\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        preSave: false,\n        data: [...state.data.filter((d) => d._id !== action.id)],\n      };\n    default:\n      return state;\n  }\n};\n\nexport const getDashboards = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboards = await dashboardService.getAllDash();\n\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const getDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboard = await dashboardService.getDash(id);\n\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const testDashboard = (dashboard) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard,\n    });\n  };\n};\n\nexport const preSaveDashboard = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\",\n    });\n  };\n};\n\nexport const saveDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const updateDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const deleteDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      await dashboardService.removeDash(id);\n\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport default dashboardReducer;\n"]},"metadata":{},"sourceType":"module"}