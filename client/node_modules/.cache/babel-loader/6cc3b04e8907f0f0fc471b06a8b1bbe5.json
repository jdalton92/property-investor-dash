{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport { CONSTANTS } from \"../static/constants\";\nconst initialState = [{\n  id: 1,\n  message: \"test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification \",\n  type: CONSTANTS.NOTIFICATION.SUCCESS\n}, {\n  id: 2,\n  message: \"test notification\",\n  type: CONSTANTS.NOTIFICATION.SUCCESS\n}];\n\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_NOTIFICATION\":\n      return [...state, action.content];\n\n    case \"CLEAR_NOTIFICATION\":\n      console.log(\"state.filter\", state.filter(n => n.id !== action.content.id));\n      return state.filter(n => n.id !== action.content.id);\n\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return dispatch => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type\n      }\n    });\n  };\n};\nexport const clearNotification = id => {\n  console.log(\"id\", id);\n  return dispatch => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      content: {\n        id\n      }\n    });\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/notificationReducer.js"],"names":["v4","uuid","CONSTANTS","initialState","id","message","type","NOTIFICATION","SUCCESS","notificationReducer","state","action","content","console","log","filter","n","setNotification","dispatch","clearNotification"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AAEA,SAASC,SAAT,QAA0B,qBAA1B;AAEA,MAAMC,YAAY,GAAG,CACnB;AACEC,EAAAA,EAAE,EAAE,CADN;AAEEC,EAAAA,OAAO,EACL,4gBAHJ;AAIEC,EAAAA,IAAI,EAAEJ,SAAS,CAACK,YAAV,CAAuBC;AAJ/B,CADmB,EAOnB;AAAEJ,EAAAA,EAAE,EAAE,CAAN;AAASC,EAAAA,OAAO,EAAE,mBAAlB;AAAuCC,EAAAA,IAAI,EAAEJ,SAAS,CAACK,YAAV,CAAuBC;AAApE,CAPmB,CAArB;;AAUA,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AAC5D,UAAQA,MAAM,CAACL,IAAf;AACE,SAAK,kBAAL;AACE,aAAO,CAAC,GAAGI,KAAJ,EAAWC,MAAM,CAACC,OAAlB,CAAP;;AACF,SAAK,oBAAL;AACEC,MAAAA,OAAO,CAACC,GAAR,CACE,cADF,EAEEJ,KAAK,CAACK,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACZ,EAAF,KAASO,MAAM,CAACC,OAAP,CAAeR,EAA5C,CAFF;AAIA,aAAOM,KAAK,CAACK,MAAN,CAAcC,CAAD,IAAOA,CAAC,CAACZ,EAAF,KAASO,MAAM,CAACC,OAAP,CAAeR,EAA5C,CAAP;;AACF;AACE,aAAOM,KAAP;AAVJ;AAYD,CAbD;;AAeA,OAAO,MAAMO,eAAe,GAAG,CAACZ,OAAD,EAAUC,IAAV,KAAmB;AAChD,SAAQY,QAAD,IAAc;AACnB,UAAMd,EAAE,GAAGH,IAAI,EAAf;AACAiB,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAE,kBADC;AAEPM,MAAAA,OAAO,EAAE;AACPR,QAAAA,EADO;AAEPC,QAAAA,OAFO;AAGPC,QAAAA;AAHO;AAFF,KAAD,CAAR;AAQD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMa,iBAAiB,GAAIf,EAAD,IAAQ;AACvCS,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBV,EAAlB;AACA,SAAQc,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPZ,MAAAA,IAAI,EAAE,oBADC;AAEPM,MAAAA,OAAO,EAAE;AACPR,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPD;AAQD,CAVM;AAYP,eAAeK,mBAAf","sourcesContent":["import { v4 as uuid } from \"uuid\";\n\nimport { CONSTANTS } from \"../static/constants\";\n\nconst initialState = [\n  {\n    id: 1,\n    message:\n      \"test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification test notification \",\n    type: CONSTANTS.NOTIFICATION.SUCCESS,\n  },\n  { id: 2, message: \"test notification\", type: CONSTANTS.NOTIFICATION.SUCCESS },\n];\n\nconst notificationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"SET_NOTIFICATION\":\n      return [...state, action.content];\n    case \"CLEAR_NOTIFICATION\":\n      console.log(\n        \"state.filter\",\n        state.filter((n) => n.id !== action.content.id)\n      );\n      return state.filter((n) => n.id !== action.content.id);\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return (dispatch) => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type,\n      },\n    });\n  };\n};\n\nexport const clearNotification = (id) => {\n  console.log(\"id\", id);\n  return (dispatch) => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      content: {\n        id,\n      },\n    });\n  };\n};\n\nexport default notificationReducer;\n"]},"metadata":{},"sourceType":"module"}