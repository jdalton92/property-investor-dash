{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Shared/FinalFormField.js\";\nimport React from \"react\";\nimport { Field } from \"react-final-form\";\nimport { composeValidators } from \"../../utils/formValidatorHelper\";\nimport { developerTooltipHelper, occupierInvestorTooltipHelper } from \"../../utils/tooltipHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\n\nconst FinalFormField = ({\n  label,\n  fieldName,\n  type,\n  validators,\n  placeholder,\n  fieldType,\n  maxLength,\n  min,\n  max,\n  step,\n  prepend,\n  append,\n  parseType,\n  readOnly\n}) => {\n  const message = type === CONSTANTS.TYPES.DEVELOPER ? developerTooltipHelper[fieldName].message : occupierInvestorTooltipHelper[fieldName].message;\n\n  const parse = value => {\n    if (parseType === \"parseInt\") {\n      return isNaN(parseInt(value)) ? \"\" : parseInt(value);\n    }\n\n    return isNaN(parseFloat(value)) ? \"\" : parseFloat(value);\n  };\n\n  const id = `${type}-${label}`;\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"label\", {\n    for: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"span\", {\n    \"aria-label\": message,\n    \"data-balloon-pos\": \"up\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, \"?\"), /*#__PURE__*/React.createElement(Field, {\n    name: fieldName,\n    validate: composeValidators(...validators),\n    parse: parse,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }, ({\n    input,\n    meta\n  }) => /*#__PURE__*/React.createElement(React.Fragment, null, prepend && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"m28\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, prepend), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    id: id,\n    className: `form-input w100 ${prepend ? \"pl32\" : \"\"} ${append ? \"pr32\" : \"\"}`,\n    placeholder: placeholder,\n    type: fieldType,\n    maxLength: maxLength,\n    min: min,\n    max: max,\n    step: step\n  }, input, {\n    readOnly: readOnly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  })), append && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 24\n    }\n  }, append), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"form-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, meta.error))));\n};\n\nexport default FinalFormField;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Shared/FinalFormField.js"],"names":["React","Field","composeValidators","developerTooltipHelper","occupierInvestorTooltipHelper","CONSTANTS","FinalFormField","label","fieldName","type","validators","placeholder","fieldType","maxLength","min","max","step","prepend","append","parseType","readOnly","message","TYPES","DEVELOPER","parse","value","isNaN","parseInt","parseFloat","id","input","meta","error","touched"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Field } from \"react-final-form\";\nimport { composeValidators } from \"../../utils/formValidatorHelper\";\nimport {\n  developerTooltipHelper,\n  occupierInvestorTooltipHelper,\n} from \"../../utils/tooltipHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\n\nconst FinalFormField = ({\n  label,\n  fieldName,\n  type,\n  validators,\n  placeholder,\n  fieldType,\n  maxLength,\n  min,\n  max,\n  step,\n  prepend,\n  append,\n  parseType,\n  readOnly,\n}) => {\n  const message =\n    type === CONSTANTS.TYPES.DEVELOPER\n      ? developerTooltipHelper[fieldName].message\n      : occupierInvestorTooltipHelper[fieldName].message;\n\n  const parse = (value) => {\n    if (parseType === \"parseInt\") {\n      return isNaN(parseInt(value)) ? \"\" : parseInt(value);\n    }\n    return isNaN(parseFloat(value)) ? \"\" : parseFloat(value);\n  };\n\n  const id = `${type}-${label}`;\n\n  return (\n    <>\n      <label for={id}>{label}</label>\n      <span aria-label={message} data-balloon-pos=\"up\">\n        ?\n      </span>\n      <Field\n        name={fieldName}\n        validate={composeValidators(...validators)}\n        parse={parse}\n      >\n        {({ input, meta }) => (\n          <>\n            {prepend && <span className=\"m28\">{prepend}</span>}\n            <input\n              id={id}\n              className={`form-input w100 ${prepend ? \"pl32\" : \"\"} ${\n                append ? \"pr32\" : \"\"\n              }`}\n              placeholder={placeholder}\n              type={fieldType}\n              maxLength={maxLength}\n              min={min}\n              max={max}\n              step={step}\n              {...input}\n              readOnly={readOnly}\n            />\n            {append && <span>{append}</span>}\n            {meta.error && meta.touched && (\n              <span className=\"form-error\">{meta.error}</span>\n            )}\n          </>\n        )}\n      </Field>\n    </>\n  );\n};\n\nexport default FinalFormField;\n"]},"metadata":{},"sourceType":"module"}