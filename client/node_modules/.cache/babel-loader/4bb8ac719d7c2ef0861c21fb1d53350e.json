{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/SavedDashboards.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { getDashboards, deleteDashboard } from \"../reducers/dashboardReducer\";\nimport Loader from \"./Shared/Loader\";\nimport Button from \"./Shared/Button\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\n\nconst SavedDashboards = ({\n  getDashboards,\n  isFetching,\n  savedDashboards,\n  deleteDashboard\n}) => {\n  const history = useHistory();\n  useEffect(() => {\n    getDashboards(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (isFetching) {\n    return /*#__PURE__*/React.createElement(Loader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 12\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h1\", {\n      className: \"f24 bold mt16 mb16\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"Saved Dashboards\"), /*#__PURE__*/React.createElement(\"table\", {\n      id: \"save-overwrite\",\n      className: \"overpayments w100 mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 15\n      }\n    }, \"Ref\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 15\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 15\n      }\n    }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 15\n      }\n    }, \"Overwrite\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }\n    }, savedDashboards.map((d, i) => {\n      var _d$values;\n\n      let baseUrl;\n\n      if (d.values.type === \"developer\") {\n        baseUrl = \"developer/dash\";\n      } else if ((_d$values = d.values) === null || _d$values === void 0 ? void 0 : _d$values.investor) {\n        baseUrl = \"investor/dash\";\n      } else {\n        baseUrl = \"owner-occupier/dash\";\n      }\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }\n      }, i + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }\n      }, d.description), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 19\n        }\n      }, type), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 19\n        }\n      }, formatDate(d.date)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        ariaLabel: \"Close\",\n        dataBalloonPos: \"left\",\n        extraClass: \"modal-close-btn mt20 mr20 button-p align-c justify-c\",\n        onClick: () => history.push(`${baseUrl}/${d._id}`),\n        iconUrl: CloseIcon,\n        iconColor: \"white\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }\n      })));\n    }))));\n  }\n};\n\nconst mapStateToProps = state => {\n  return {\n    savedDashboards: state.dashboards.savedDashboards,\n    isFetching: state.dashboards.isFetching\n  };\n};\n\nconst mapDispatchToProps = {\n  getDashboards,\n  deleteDashboard\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedDashboards);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/SavedDashboards.js"],"names":["React","useEffect","connect","useHistory","getDashboards","deleteDashboard","Loader","Button","SavedDashboards","isFetching","savedDashboards","history","map","d","i","baseUrl","values","type","investor","description","formatDate","date","push","_id","CloseIcon","mapStateToProps","state","dashboards","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { getDashboards, deleteDashboard } from \"../reducers/dashboardReducer\";\nimport Loader from \"./Shared/Loader\";\nimport Button from \"./Shared/Button\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\n\nconst SavedDashboards = ({\n  getDashboards,\n  isFetching,\n  savedDashboards,\n  deleteDashboard,\n}) => {\n  const history = useHistory();\n  useEffect(() => {\n    getDashboards();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  if (isFetching) {\n    return <Loader />;\n  } else {\n    return (\n      <>\n        <h1 className=\"f24 bold mt16 mb16\">Saved Dashboards</h1>\n        <table id=\"save-overwrite\" className=\"overpayments w100 mb20\">\n          <thead>\n            <tr>\n              <th className=\"h768\">Ref</th>\n              <th>Description</th>\n              <th className=\"h768\">Type</th>\n              <th>Created</th>\n              <th>Overwrite</th>\n            </tr>\n          </thead>\n          <tbody>\n            {savedDashboards.map((d, i) => {\n              let baseUrl;\n              if (d.values.type === \"developer\") {\n                baseUrl = \"developer/dash\";\n              } else if (d.values?.investor) {\n                baseUrl = \"investor/dash\";\n              } else {\n                baseUrl = \"owner-occupier/dash\";\n              }\n              return (\n                <tr key={i}>\n                  <td className=\"h768\">{i + 1}</td>\n                  <td>{d.description}</td>\n                  <td className=\"h768\">{type}</td>\n                  <td>{formatDate(d.date)}</td>\n                  <td>\n                    <Button\n                      ariaLabel={\"Close\"}\n                      dataBalloonPos={\"left\"}\n                      extraClass={\n                        \"modal-close-btn mt20 mr20 button-p align-c justify-c\"\n                      }\n                      onClick={() => history.push(`${baseUrl}/${d._id}`)}\n                      iconUrl={CloseIcon}\n                      iconColor={\"white\"}\n                    />\n                    {/* <div className=\"flex-row\">\n                      <button\n                        type=\"button\"\n                        className=\"save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump\"\n                        onClick={() => history.push(`${baseUrl}/${d._id}`)}\n                      >\n                        <Icon\n                          size={\"20px\"}\n                          url={SaveIcon}\n                          color={\"black\"}\n                          hover={false}\n                          active={false}\n                        />\n                      </button>\n                      <button\n                        type=\"button\"\n                        className={`save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n                          saveNew ? \"\" : \"active\"\n                        }`}\n                        onClick={() => deleteDashboard(d._id)}\n                      >\n                        <Icon\n                          size={\"20px\"}\n                          url={OverwriteIcon}\n                          color={\"black\"}\n                          hover={false}\n                          active={false}\n                        />\n                      </button>\n                    </div> */}\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </>\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    savedDashboards: state.dashboards.savedDashboards,\n    isFetching: state.dashboards.isFetching,\n  };\n};\n\nconst mapDispatchToProps = {\n  getDashboards,\n  deleteDashboard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SavedDashboards);\n"]},"metadata":{},"sourceType":"module"}