{"ast":null,"code":"export const reducerHelper = data => {\n  return data.reduce((accumulator, item) => {\n    Object.keys(item).forEach(key => {\n      accumulator[key] = (accumulator[key] || 0) + item[key];\n    });\n    return accumulator;\n  }, []);\n};\nexport const dashboardType = values => {\n  if (values.type === \"developer\") {\n    return \"Developer\";\n  } else if (values.type === \"occupierInvestor\" && values.investor) return \"Investor\";\n\n  return \"Owner-Occupier\";\n};\nexport const formatDate = dbDate => {\n  const date = new Date(dbDate);\n  return new Intl.DateTimeFormat(\"en-GB\").format(date);\n};\nexport const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\nexport const percentageFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1\n});\n\nconst IRRHelper = cashflow => {\n  let min = -1.0;\n  let max = 1.0;\n  let j = 1;\n  let guess = 0;\n  let NPV = 0;\n\n  do {\n    guess = (min + max) / 2;\n    NPV = 0;\n\n    for (let i = 0; i < cashflow.length; i++) {\n      NPV += cashflow[i] / Math.pow(1 + guess / 12, i);\n    }\n\n    if (NPV > 0) {\n      min = guess;\n    } else {\n      max = guess;\n    }\n\n    if (j > 100) {\n      return undefined;\n    }\n\n    j++;\n  } while (Math.abs(NPV) > 0.01);\n\n  return guess;\n};\n\nexport const IRRCalculation = data => {\n  const preCashflow = data.map(c => c.preFinanceCashflow);\n  const postCashflow = data.map(c => c.postFinanceCashflow);\n  const preFinance = IRRHelper(preCashflow);\n  const postFinance = IRRHelper(postCashflow);\n  return {\n    preFinance,\n    postFinance\n  };\n};","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/helpers/dashboardHelper.js"],"names":["reducerHelper","data","reduce","accumulator","item","Object","keys","forEach","key","dashboardType","values","type","investor","formatDate","dbDate","date","Date","Intl","DateTimeFormat","format","currencyFormatter","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","percentageFormatter","IRRHelper","cashflow","min","max","j","guess","NPV","i","length","Math","pow","undefined","abs","IRRCalculation","preCashflow","map","c","preFinanceCashflow","postCashflow","postFinanceCashflow","preFinance","postFinance"],"mappings":"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","sourcesContent":["export const reducerHelper = data => {\n  return data.reduce((accumulator, item) => {\n    Object.keys(item).forEach(key => {\n      accumulator[key] = (accumulator[key] || 0) + item[key];\n    });\n    return accumulator;\n  }, []);\n};\n\nexport const dashboardType = values => {\n  if (values.type === \"developer\") {\n    return \"Developer\";\n  } else if (values.type === \"occupierInvestor\" && values.investor)\n    return \"Investor\";\n  return \"Owner-Occupier\";\n};\n\nexport const formatDate = dbDate => {\n  const date = new Date(dbDate);\n  return new Intl.DateTimeFormat(\"en-GB\").format(date);\n};\n\nexport const currencyFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n\nexport const percentageFormatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"percent\",\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1\n});\n\nconst IRRHelper = cashflow => {\n  let min = -1.0;\n  let max = 1.0;\n  let j = 1;\n  let guess = 0;\n  let NPV = 0;\n  do {\n    guess = (min + max) / 2;\n    NPV = 0;\n    for (let i = 0; i < cashflow.length; i++) {\n      NPV += cashflow[i] / Math.pow(1 + guess / 12, i);\n    }\n    if (NPV > 0) {\n      min = guess;\n    } else {\n      max = guess;\n    }\n    if (j > 100) {\n      return undefined;\n    }\n    j++;\n  } while (Math.abs(NPV) > 0.01);\n  return guess;\n};\n\nexport const IRRCalculation = data => {\n  const preCashflow = data.map(c => c.preFinanceCashflow);\n  const postCashflow = data.map(c => c.postFinanceCashflow);\n  const preFinance = IRRHelper(preCashflow);\n  const postFinance = IRRHelper(postCashflow);\n  return {\n    preFinance,\n    postFinance\n  };\n};\n"]},"metadata":{},"sourceType":"module"}