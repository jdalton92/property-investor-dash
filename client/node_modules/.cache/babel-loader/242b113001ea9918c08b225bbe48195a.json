{"ast":null,"code":"import dashboardService from \"../services/dashboard\";\nimport { v4 as uuid } from \"uuid\";\nimport { CONSTANTS } from \"../static/constants\"; // const initialOwnerData = {\n//   housePrice: 1000000,\n//   deposit: 200000,\n//   loanType: \"principalAndInterest\",\n//   interestRate: 3.5,\n//   homeloanTerm: 30,\n//   overPayments: [{}],\n//   investmentPeriod: 15,\n//   sellingCosts: 3,\n//   capitalGrowth: 3.5,\n//   upfrontCosts: 3,\n//   recurringCosts: 1000,\n//   rentalYield: 3,\n//   investor: false,\n//   inflation: 3,\n// };\n// const initialDeveloperData = {\n//   acquisitionPrice: 100000,\n//   acquisitionCosts: 5,\n//   dwellings: 4,\n//   constructionCostPerDwelling: 400000,\n//   designFees: 10,\n//   constructionContingency: 10,\n//   statutoryFees: 3,\n//   constructionDuration: 24,\n//   planningAndDesign: 6,\n//   revenuePerDwelling: 750000,\n//   sellingCosts: 5,\n//   investmentPeriod: 5,\n//   recurringCosts: 30,\n//   rentalYield: 4,\n//   initialEquity: 400000,\n//   loanType: \"interestOnly\",\n//   interestRate: 3.5,\n//   loanTerm: 30,\n//   overPayments: [{}],\n//   capitalGrowth: 3.5,\n//   constructionCostGrowth: 2.5,\n// };\n\nlet initialState = {\n  isFetching: false,\n  savedDashboards: [],\n  currentDashboard: {\n    preSave: false,\n    data: {\n      values: {}\n    }\n  }\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      newState = { ...state\n      };\n      newState.isFetching = true;\n      return newState;\n\n    case \"DASHBOARD_REQUEST_FAIL\":\n      newState = { ...state\n      };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      return newState;\n\n    case \"TEST_DASHBOARD\":\n      newState = { ...state\n      };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = true;\n      newState.currentDashboard.data.values = action.data;\n      return newState;\n\n    case \"PRE_SAVE_DASHBOARD\":\n      newState = { ...state\n      };\n      newState.currentDashboard.preSave = true;\n      return newState;\n\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        savedDashboards: action.data,\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {}\n          }\n        }\n      };\n\n    case \"GET_DASHBOARD\":\n      newState = { ...state\n      };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      newState.currentDashboard.data = action.data;\n      console.log(\"newState \", newState);\n      return newState;\n\n    case \"SAVE_DASHBOARD\":\n      newState = { ...state\n      };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      newState.savedDashboards = [...state.savedDashboards, action.data];\n      return newState;\n\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter(d => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        savedDashboards: [...dashboardList, action.data],\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {}\n          }\n        }\n      };\n\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        savedDashboards: [...state.data.filter(d => d._id !== action.id)],\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {}\n          }\n        }\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const dashboardRequest = () => {\n  dispatch({\n    type: \"DASHBOARD_REQUEST\"\n  });\n};\nexport const getDashboards = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboards = await dashboardService.getAllDash();\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR\n        }\n      });\n    }\n  };\n};\nexport const getDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const dashboard = await dashboardService.getDash(id);\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR\n        }\n      });\n    }\n  };\n};\nexport const testDashboard = dashboard => {\n  return dispatch => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard\n    });\n  };\n};\nexport const preSaveDashboard = () => {\n  return dispatch => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\"\n    });\n  };\n};\nexport const saveDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: `${newDash.description} saved`,\n          type: CONSTANTS.NOTIFICATION.SUCCESS\n        }\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR\n        }\n      });\n    }\n  };\n};\nexport const updateDashboard = dashboardObject => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: `${newDash.description} saved`,\n          type: CONSTANTS.NOTIFICATION.SUCCESS\n        }\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR\n        }\n      });\n    }\n  };\n};\nexport const deleteDashboard = id => {\n  return async dispatch => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\"\n    });\n\n    try {\n      await dashboardService.removeDash(id);\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: \"Dashboard delected\",\n          type: CONSTANTS.NOTIFICATION.SUCCESS\n        }\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR\n        }\n      });\n    }\n  };\n};\nexport default dashboardReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/dashboardReducer.js"],"names":["dashboardService","v4","uuid","CONSTANTS","initialState","isFetching","savedDashboards","currentDashboard","preSave","data","values","dashboardReducer","state","action","newState","type","console","log","dashboardList","filter","d","_id","id","dashboardRequest","dispatch","getDashboards","dashboards","getAllDash","e","content","message","response","error","NOTIFICATION","ERROR","getDashboard","dashboard","getDash","testDashboard","preSaveDashboard","saveDashboard","dashboardObject","newDash","saveDash","description","SUCCESS","updateDashboard","updateDash","deleteDashboard","removeDash"],"mappings":"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","sourcesContent":["import dashboardService from \"../services/dashboard\";\nimport { v4 as uuid } from \"uuid\";\nimport { CONSTANTS } from \"../static/constants\";\n\n// const initialOwnerData = {\n//   housePrice: 1000000,\n//   deposit: 200000,\n//   loanType: \"principalAndInterest\",\n//   interestRate: 3.5,\n//   homeloanTerm: 30,\n//   overPayments: [{}],\n//   investmentPeriod: 15,\n//   sellingCosts: 3,\n//   capitalGrowth: 3.5,\n//   upfrontCosts: 3,\n//   recurringCosts: 1000,\n//   rentalYield: 3,\n//   investor: false,\n//   inflation: 3,\n// };\n\n// const initialDeveloperData = {\n//   acquisitionPrice: 100000,\n//   acquisitionCosts: 5,\n//   dwellings: 4,\n//   constructionCostPerDwelling: 400000,\n//   designFees: 10,\n//   constructionContingency: 10,\n//   statutoryFees: 3,\n//   constructionDuration: 24,\n//   planningAndDesign: 6,\n\n//   revenuePerDwelling: 750000,\n//   sellingCosts: 5,\n//   investmentPeriod: 5,\n//   recurringCosts: 30,\n//   rentalYield: 4,\n\n//   initialEquity: 400000,\n//   loanType: \"interestOnly\",\n//   interestRate: 3.5,\n//   loanTerm: 30,\n//   overPayments: [{}],\n\n//   capitalGrowth: 3.5,\n//   constructionCostGrowth: 2.5,\n// };\n\nlet initialState = {\n  isFetching: false,\n  savedDashboards: [],\n  currentDashboard: {\n    preSave: false,\n    data: {\n      values: {},\n    },\n  },\n};\n\nconst dashboardReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case \"DASHBOARD_REQUEST\":\n      newState = { ...state };\n      newState.isFetching = true;\n      return newState;\n    case \"DASHBOARD_REQUEST_FAIL\":\n      newState = { ...state };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      return newState;\n    case \"TEST_DASHBOARD\":\n      newState = { ...state };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = true;\n      newState.currentDashboard.data.values = action.data;\n      return newState;\n    case \"PRE_SAVE_DASHBOARD\":\n      newState = { ...state };\n      newState.currentDashboard.preSave = true;\n      return newState;\n    case \"INIT_DASHBOARDS\":\n      return {\n        isFetching: false,\n        savedDashboards: action.data,\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {},\n          },\n        },\n      };\n    case \"GET_DASHBOARD\":\n      newState = { ...state };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      newState.currentDashboard.data = action.data;\n      console.log(\"newState \", newState);\n      return newState;\n    case \"SAVE_DASHBOARD\":\n      newState = { ...state };\n      newState.isFetching = false;\n      newState.currentDashboard.preSave = false;\n      newState.savedDashboards = [...state.savedDashboards, action.data];\n      return newState;\n    case \"UPDATE_DASHBOARDS\":\n      const dashboardList = state.data.filter((d) => d._id !== action.data._id);\n      return {\n        isFetching: false,\n        savedDashboards: [...dashboardList, action.data],\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {},\n          },\n        },\n      };\n    case \"DELETE_DASHBOARD\":\n      return {\n        isFetching: false,\n        savedDashboards: [...state.data.filter((d) => d._id !== action.id)],\n        currentDashboard: {\n          preSave: false,\n          data: {\n            values: {},\n          },\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nexport const dashboardRequest = () => {\n  dispatch({\n    type: \"DASHBOARD_REQUEST\",\n  });\n};\n\nexport const getDashboards = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboards = await dashboardService.getAllDash();\n\n      dispatch({\n        type: \"INIT_DASHBOARDS\",\n        data: dashboards,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR,\n        },\n      });\n    }\n  };\n};\n\nexport const getDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const dashboard = await dashboardService.getDash(id);\n\n      dispatch({\n        type: \"GET_DASHBOARD\",\n        data: dashboard,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR,\n        },\n      });\n    }\n  };\n};\n\nexport const testDashboard = (dashboard) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"TEST_DASHBOARD\",\n      data: dashboard,\n    });\n  };\n};\n\nexport const preSaveDashboard = () => {\n  return (dispatch) => {\n    dispatch({\n      type: \"PRE_SAVE_DASHBOARD\",\n    });\n  };\n};\n\nexport const saveDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.saveDash(dashboardObject);\n\n      dispatch({\n        type: \"SAVE_DASHBOARD\",\n        data: newDash,\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: `${newDash.description} saved`,\n          type: CONSTANTS.NOTIFICATION.SUCCESS,\n        },\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR,\n        },\n      });\n    }\n  };\n};\n\nexport const updateDashboard = (dashboardObject) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      const newDash = await dashboardService.updateDash(dashboardObject);\n\n      dispatch({\n        type: \"UPDATE_DASHBOARDS\",\n        data: newDash,\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: `${newDash.description} saved`,\n          type: CONSTANTS.NOTIFICATION.SUCCESS,\n        },\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR,\n        },\n      });\n    }\n  };\n};\n\nexport const deleteDashboard = (id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"DASHBOARD_REQUEST\",\n    });\n    try {\n      await dashboardService.removeDash(id);\n\n      dispatch({\n        type: \"DELETE_DASHBOARD\",\n        id,\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: \"Dashboard delected\",\n          type: CONSTANTS.NOTIFICATION.SUCCESS,\n        },\n      });\n    } catch (e) {\n      dispatch({\n        type: \"DASHBOARD_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          id: uuid(),\n          message: e.response.data.error,\n          type: CONSTANTS.NOTIFICATION.ERROR,\n        },\n      });\n    }\n  };\n};\n\nexport default dashboardReducer;\n"]},"metadata":{},"sourceType":"module"}