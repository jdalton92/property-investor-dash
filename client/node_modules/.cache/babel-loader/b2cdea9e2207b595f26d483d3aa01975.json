{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Dashboards/SaveDashboardModal.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\nimport { setModal, setTab } from \"../../reducers/navigationReducer\";\nimport { saveDashboard, updateDashboard } from \"../../reducers/dashboardReducer\";\nimport { composeValidators, required, maxLength, minLength } from \"../../utils/formValidatorHelper\";\nimport { formatDate } from \"../../utils/dashboardHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport Button from \"../Shared/Button\";\nimport { Icon } from \"../Shared/Icon\";\nimport Loader from \"../Shared/Loader\";\nimport CloseIcon from \"../../styles/svg/close.svg\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\nimport OverwriteIcon from \"../../styles/svg/overwrite.svg\";\nimport { setNotification } from \"../../reducers/notificationReducer\";\n\nconst SaveDashboardModal = ({\n  isFetching,\n  currentDashboard,\n  savedDashboards,\n  setModal,\n  saveDashboard,\n  updateDashboard,\n  setNotification,\n  email,\n  setTab,\n  tab\n}) => {\n  const [selectedDashboard, setSelectedDashboard] = useState(null);\n\n  const handleSave = async saveData => {\n    if (!email) {\n      setNotification(\"Log in to save dashboard\", CONSTANTS.NOTIFICATION.ERROR);\n      return;\n    }\n\n    const dashObject = {\n      values: currentDashboard.values,\n      ...saveData\n    };\n    await saveDashboard(dashObject);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  const handleOverwrite = async ({\n    address,\n    description\n  }) => {\n    if (!email) {\n      setNotification(\"Log in to save dashboard\", CONSTANTS.NOTIFICATION.ERROR);\n      return;\n    } // New dashboard\n\n\n    const newDashboard = {\n      _id: selectedDashboard,\n      address,\n      description,\n      values: currentDashboard.values\n    };\n    await updateDashboard(newDashboard);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  const handleCancel = () => {\n    // React Final Form handles preventDefault()\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal fixed r bs-3 bg-1 p20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    ariaLabel: \"Close\",\n    dataBalloonPos: \"left\",\n    extraClass: \"modal-close-btn mt20 mr20 button-p align-c justify-c\",\n    onClick: handleCancel,\n    iconUrl: CloseIcon,\n    iconColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"f20 bold mb16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, \"Save Dashboard\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: `save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${tab === CONSTANTS.TABS.SAVEDASHBOARD.SAVE ? \"active\" : \"\"}`,\n    onClick: () => setTab(\"saveDashboard\", CONSTANTS.TABS.SAVEDASHBOARD.SAVE),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: SaveIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }, \"Save New\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: `save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE ? \"active\" : \"\"}`,\n    onClick: () => setTab(\"saveDashboard\", CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: OverwriteIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, \"Overwrite Existing\"))), isFetching && /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 22\n    }\n  }), !isFetching && tab === CONSTANTS.TABS.SAVEDASHBOARD.SAVE && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSave,\n    render: ({\n      handleSubmit,\n      form\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      className: \"save-form mt20 mb20\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"save-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }, \"Description\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"save-description\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Description\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 23\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"save-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }\n    }, \"Address\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 19\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"address\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"save-address\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Address\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 21\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 23\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-buttons mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"form-button-p bs-3 font-white mt12 pt8 pb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }\n    }, \"Save As\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }\n  }), !isFetching && tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE && savedDashboards.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt20 f16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, \"No saved dashboards...\"), !isFetching && tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE && savedDashboards.length > 0 && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleOverwrite,\n    validate: values => {\n      const errors = {};\n\n      if (!selectedDashboard) {\n        errors.dashboard = \"Required\";\n      }\n\n      return errors;\n    },\n    render: ({\n      handleSubmit,\n      form,\n      values\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      className: \"save-form mt20 mb20\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"overwrite-dashboard\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, \"Dashboard\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"dashboard\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 17\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mh300 o-y-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      id: \"overwrite-dashboard\",\n      className: \"overpayments w100\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 31\n      }\n    }, \"Ref\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 31\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 31\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 31\n      }\n    }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 31\n      }\n    }, \"Overwrite\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 27\n      }\n    }, savedDashboards.map((d, i) => {\n      var _d$values, _d$values2;\n\n      let type;\n\n      if (((_d$values = d.values) === null || _d$values === void 0 ? void 0 : _d$values.type) === \"developer\") {\n        type = \"Developer\";\n      } else if ((_d$values2 = d.values) === null || _d$values2 === void 0 ? void 0 : _d$values2.investor) {\n        type = \"Investor\";\n      } else {\n        type = \"Owner Occupier\";\n      }\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        onClick: () => selectedDashboard === d._id ? setSelectedDashboard(null) : setSelectedDashboard(d._id),\n        className: `${d._id === selectedDashboard ? \"selected\" : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 33\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 35\n        }\n      }, i + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 35\n        }\n      }, d.description), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 35\n        }\n      }, type), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 35\n        }\n      }, formatDate(d.date)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 35\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: \"ml16\",\n        type: \"checkbox\",\n        checked: d._id === selectedDashboard,\n        value: d._id,\n        onChange: () => selectedDashboard === d._id ? setSelectedDashboard(null) : setSelectedDashboard(d._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 37\n        }\n      })));\n    })))), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 25\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"overwrite-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 19\n      }\n    }, \"Description\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 21\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"overwrite-description\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Description\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 23\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 25\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"overwrite-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 19\n      }\n    }, \"Address\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 21\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"address\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 17\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"overwrite-address\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Address\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 23\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 25\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"form-button-p bs-3 font-white mt12 pt8 pb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 19\n      }\n    }, \"Save\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  var _state$user$data;\n\n  return {\n    isFetching: state.dashboards.isFetching,\n    currentDashboard: state.dashboards.currentDashboard.data,\n    savedDashboards: state.dashboards.savedDashboards,\n    saveDashboardModal: state.navigation.modal.saveDashboard,\n    tab: state.navigation.tabs.saveDashboard,\n    email: (_state$user$data = state.user.data) === null || _state$user$data === void 0 ? void 0 : _state$user$data.email\n  };\n};\n\nconst mapDispatchToProps = {\n  setModal,\n  setTab,\n  saveDashboard,\n  updateDashboard,\n  setNotification\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SaveDashboardModal);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Dashboards/SaveDashboardModal.js"],"names":["React","useState","connect","Form","Field","setModal","setTab","saveDashboard","updateDashboard","composeValidators","required","maxLength","minLength","formatDate","CONSTANTS","Button","Icon","Loader","setNotification","SaveDashboardModal","isFetching","currentDashboard","savedDashboards","email","tab","selectedDashboard","setSelectedDashboard","handleSave","saveData","NOTIFICATION","ERROR","dashObject","values","MODALS","SAVEDASHBOARD","handleOverwrite","address","description","newDashboard","_id","handleCancel","CloseIcon","TABS","SAVE","SaveIcon","OVERWRITE","OverwriteIcon","handleSubmit","form","input","meta","error","touched","length","errors","dashboard","map","d","i","type","investor","date","mapStateToProps","state","dashboards","data","saveDashboardModal","navigation","modal","tabs","user","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\nimport { setModal, setTab } from \"../../reducers/navigationReducer\";\nimport {\n  saveDashboard,\n  updateDashboard,\n} from \"../../reducers/dashboardReducer\";\nimport {\n  composeValidators,\n  required,\n  maxLength,\n  minLength,\n} from \"../../utils/formValidatorHelper\";\nimport { formatDate } from \"../../utils/dashboardHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport Button from \"../Shared/Button\";\nimport { Icon } from \"../Shared/Icon\";\nimport Loader from \"../Shared/Loader\";\nimport CloseIcon from \"../../styles/svg/close.svg\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\nimport OverwriteIcon from \"../../styles/svg/overwrite.svg\";\nimport { setNotification } from \"../../reducers/notificationReducer\";\n\nconst SaveDashboardModal = ({\n  isFetching,\n  currentDashboard,\n  savedDashboards,\n  setModal,\n  saveDashboard,\n  updateDashboard,\n  setNotification,\n  email,\n  setTab,\n  tab,\n}) => {\n  const [selectedDashboard, setSelectedDashboard] = useState(null);\n\n  const handleSave = async (saveData) => {\n    if (!email) {\n      setNotification(\"Log in to save dashboard\", CONSTANTS.NOTIFICATION.ERROR);\n      return;\n    }\n\n    const dashObject = {\n      values: currentDashboard.values,\n      ...saveData,\n    };\n    await saveDashboard(dashObject);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  const handleOverwrite = async ({ address, description }) => {\n    if (!email) {\n      setNotification(\"Log in to save dashboard\", CONSTANTS.NOTIFICATION.ERROR);\n      return;\n    }\n\n    // New dashboard\n    const newDashboard = {\n      _id: selectedDashboard,\n      address,\n      description,\n      values: currentDashboard.values,\n    };\n    await updateDashboard(newDashboard);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  const handleCancel = () => {\n    // React Final Form handles preventDefault()\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  return (\n    <div className=\"modal fixed r bs-3 bg-1 p20\">\n      <Button\n        ariaLabel={\"Close\"}\n        dataBalloonPos={\"left\"}\n        extraClass={\"modal-close-btn mt20 mr20 button-p align-c justify-c\"}\n        onClick={handleCancel}\n        iconUrl={CloseIcon}\n        iconColor={\"white\"}\n      />\n      <h2 className=\"f20 bold mb16\">Save Dashboard</h2>\n      <div className=\"flex-row\">\n        <button\n          type=\"button\"\n          className={`save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n            tab === CONSTANTS.TABS.SAVEDASHBOARD.SAVE ? \"active\" : \"\"\n          }`}\n          onClick={() =>\n            setTab(\"saveDashboard\", CONSTANTS.TABS.SAVEDASHBOARD.SAVE)\n          }\n        >\n          <Icon\n            size={\"20px\"}\n            url={SaveIcon}\n            color={\"black\"}\n            hover={false}\n            active={false}\n          />\n          <span className=\"ml8 f16 bold\">Save New</span>\n        </button>\n        <button\n          type=\"button\"\n          className={`save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n            tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE ? \"active\" : \"\"\n          }`}\n          onClick={() =>\n            setTab(\"saveDashboard\", CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE)\n          }\n        >\n          <Icon\n            size={\"20px\"}\n            url={OverwriteIcon}\n            color={\"black\"}\n            hover={false}\n            active={false}\n          />\n          <span className=\"ml8 f16 bold\">Overwrite Existing</span>\n        </button>\n      </div>\n      {isFetching && <Loader />}\n      {!isFetching && tab === CONSTANTS.TABS.SAVEDASHBOARD.SAVE && (\n        <Form\n          onSubmit={handleSave}\n          render={({ handleSubmit, form }) => (\n            <form className=\"save-form mt20 mb20\" onSubmit={handleSubmit}>\n              <div className=\"flex-row align-c relative\">\n                <label htmlFor=\"save-description\" className=\"f16 mb8\">\n                  Description\n                  <span className=\"font-red f12 bold ml4\">*</span>\n                </label>\n              </div>\n              <Field\n                name=\"description\"\n                validate={composeValidators(\n                  required,\n                  minLength(3),\n                  maxLength(200)\n                )}\n              >\n                {({ input, meta }) => (\n                  <div className=\"relative mb20\">\n                    <input\n                      id=\"save-description\"\n                      className=\"form-input bs-1 w100\"\n                      placeholder=\"Description\"\n                      type=\"text\"\n                      {...input}\n                    />\n                    {meta.error && meta.touched && (\n                      <span className=\"form-error f10\">{meta.error}</span>\n                    )}\n                  </div>\n                )}\n              </Field>\n              <div className=\"flex-row align-c relative\">\n                <label htmlFor=\"save-description\" className=\"f16 mb8\">\n                  Address\n                  <span className=\"font-red f12 bold ml4\">*</span>\n                </label>\n              </div>\n              <Field\n                name=\"address\"\n                validate={composeValidators(\n                  required,\n                  minLength(3),\n                  maxLength(200)\n                )}\n              >\n                {({ input, meta }) => (\n                  <div className=\"relative mb20\">\n                    <input\n                      id=\"save-address\"\n                      className=\"form-input bs-1 w100\"\n                      placeholder=\"Address\"\n                      type=\"text\"\n                      {...input}\n                    />\n                    {meta.error && meta.touched && (\n                      <span className=\"form-error f10\">{meta.error}</span>\n                    )}\n                  </div>\n                )}\n              </Field>\n              <div className=\"form-buttons mb20\">\n                <button\n                  type=\"submit\"\n                  className=\"form-button-p bs-3 font-white mt12 pt8 pb8\"\n                >\n                  Save As\n                </button>\n              </div>\n            </form>\n          )}\n        />\n      )}\n      {!isFetching &&\n        tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE &&\n        savedDashboards.length === 0 && (\n          <div className=\"mt20 f16\">No saved dashboards...</div>\n        )}\n      {!isFetching &&\n        tab === CONSTANTS.TABS.SAVEDASHBOARD.OVERWRITE &&\n        savedDashboards.length > 0 && (\n          <Form\n            onSubmit={handleOverwrite}\n            validate={(values) => {\n              const errors = {};\n              if (!selectedDashboard) {\n                errors.dashboard = \"Required\";\n              }\n              return errors;\n            }}\n            render={({ handleSubmit, form, values }) => (\n              <form className=\"save-form mt20 mb20\" onSubmit={handleSubmit}>\n                <div className=\"flex-row align-c relative\">\n                  <label htmlFor=\"overwrite-dashboard\" className=\"f16 mb8\">\n                    Dashboard\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                </div>\n                <Field name=\"dashboard\">\n                  {({ input, meta }) => (\n                    <div className=\"relative mb20\">\n                      <div className=\"mh300 o-y-auto\">\n                        <table\n                          id=\"overwrite-dashboard\"\n                          className=\"overpayments w100\"\n                        >\n                          <thead>\n                            <tr>\n                              <th className=\"h768\">Ref</th>\n                              <th>Description</th>\n                              <th className=\"h768\">Type</th>\n                              <th>Created</th>\n                              <th>Overwrite</th>\n                            </tr>\n                          </thead>\n                          <tbody>\n                            {savedDashboards.map((d, i) => {\n                              let type;\n                              if (d.values?.type === \"developer\") {\n                                type = \"Developer\";\n                              } else if (d.values?.investor) {\n                                type = \"Investor\";\n                              } else {\n                                type = \"Owner Occupier\";\n                              }\n                              return (\n                                <tr\n                                  key={i}\n                                  onClick={() =>\n                                    selectedDashboard === d._id\n                                      ? setSelectedDashboard(null)\n                                      : setSelectedDashboard(d._id)\n                                  }\n                                  className={`${\n                                    d._id === selectedDashboard\n                                      ? \"selected\"\n                                      : \"\"\n                                  }`}\n                                >\n                                  <td className=\"h768\">{i + 1}</td>\n                                  <td>{d.description}</td>\n                                  <td className=\"h768\">{type}</td>\n                                  <td>{formatDate(d.date)}</td>\n                                  <td>\n                                    <input\n                                      className=\"ml16\"\n                                      type=\"checkbox\"\n                                      checked={d._id === selectedDashboard}\n                                      value={d._id}\n                                      onChange={() =>\n                                        selectedDashboard === d._id\n                                          ? setSelectedDashboard(null)\n                                          : setSelectedDashboard(d._id)\n                                      }\n                                    />\n                                  </td>\n                                </tr>\n                              );\n                            })}\n                          </tbody>\n                        </table>\n                      </div>\n                      {meta.error && meta.touched && (\n                        <span className=\"form-error f10\">{meta.error}</span>\n                      )}\n                    </div>\n                  )}\n                </Field>\n                <div className=\"flex-row align-c relative\">\n                  <label htmlFor=\"overwrite-description\" className=\"f16 mb8\">\n                    Description\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                </div>\n                <Field\n                  name=\"description\"\n                  validate={composeValidators(\n                    required,\n                    minLength(3),\n                    maxLength(200)\n                  )}\n                >\n                  {({ input, meta }) => (\n                    <div className=\"relative mb20\">\n                      <input\n                        id=\"overwrite-description\"\n                        className=\"form-input bs-1 w100\"\n                        placeholder=\"Description\"\n                        type=\"text\"\n                        {...input}\n                      />\n                      {meta.error && meta.touched && (\n                        <span className=\"form-error f10\">{meta.error}</span>\n                      )}\n                    </div>\n                  )}\n                </Field>\n                <div className=\"flex-row align-c relative\">\n                  <label htmlFor=\"overwrite-description\" className=\"f16 mb8\">\n                    Address\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                </div>\n                <Field\n                  name=\"address\"\n                  validate={composeValidators(\n                    required,\n                    minLength(3),\n                    maxLength(200)\n                  )}\n                >\n                  {({ input, meta }) => (\n                    <div className=\"relative mb20\">\n                      <input\n                        id=\"overwrite-address\"\n                        className=\"form-input bs-1 w100\"\n                        placeholder=\"Address\"\n                        type=\"text\"\n                        {...input}\n                      />\n                      {meta.error && meta.touched && (\n                        <span className=\"form-error f10\">{meta.error}</span>\n                      )}\n                    </div>\n                  )}\n                </Field>\n                <div className=\"form-buttons\">\n                  <button\n                    type=\"submit\"\n                    className=\"form-button-p bs-3 font-white mt12 pt8 pb8\"\n                  >\n                    Save\n                  </button>\n                </div>\n              </form>\n            )}\n          />\n        )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isFetching: state.dashboards.isFetching,\n    currentDashboard: state.dashboards.currentDashboard.data,\n    savedDashboards: state.dashboards.savedDashboards,\n    saveDashboardModal: state.navigation.modal.saveDashboard,\n    tab: state.navigation.tabs.saveDashboard,\n    email: state.user.data?.email,\n  };\n};\n\nconst mapDispatchToProps = {\n  setModal,\n  setTab,\n  saveDashboard,\n  updateDashboard,\n  setNotification,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SaveDashboardModal);\n"]},"metadata":{},"sourceType":"module"}