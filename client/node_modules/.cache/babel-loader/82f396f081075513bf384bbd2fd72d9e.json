{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Login.js\";\nimport React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { loginUser, createUser, demoUser } from \"../reducers/userReducer\";\nimport { setNotification } from \"../reducers/notificationReducer\";\nimport { setTab } from \"../reducers/navigationReducer\";\nimport { required, minLength, isEmail, composeValidators } from \"../utils/formValidatorHelper\";\nimport { CONSTANTS } from \"../static/constants\";\nimport { Icon } from \"./Shared/Icon\";\nimport UserIcon from \"../styles/svg/user.svg\";\nimport CreateUserIcon from \"../styles/svg/create-user.svg\";\n\nconst Login = ({\n  loginUser,\n  createUser,\n  user,\n  demoUser,\n  setNotification,\n  setTab,\n  tab\n}) => {\n  const history = useHistory();\n  useEffect(() => {\n    if (user.data.username) {\n      history.push(\"/\");\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n\n  const handleLogin = async ({\n    email,\n    password\n  }) => {\n    await loginUser(email, password);\n  };\n\n  const handleForgotPassword = () => {\n    setNotification(\"Forgot password clicked\", CONSTANTS.NOTIFICATION.MESSAGE);\n  };\n\n  const handleCreateUser = async ({\n    email,\n    password,\n    checkPassword\n  }) => {\n    await createUser(email, password, checkPassword);\n  };\n\n  const handleDemo = () => {\n    demoUser();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"vh100 w100 fade-in relative bg-blue-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"center login\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"h100 r p24 m8 bs-3 bg-1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"bold f24 mb16 mt16 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"PropertyInvestorDash\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row mb16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: `tab-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${tab === CONSTANTS.TABS.LOGIN.LOGIN ? \"active\" : \"\"}`,\n    onClick: () => setTab(\"login\", CONSTANTS.TABS.LOGIN.LOGIN),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: UserIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 15\n    }\n  }, \"Login\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    className: `tab-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${tab === CONSTANTS.TABS.LOGIN.CREATEUSER ? \"active\" : \"\"}`,\n    onClick: () => setTab(\"login\", CONSTANTS.TABS.LOGIN.CREATEUSER),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: CreateUserIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"Create User\"))), tab === CONSTANTS.TABS.LOGIN.LOGIN && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleLogin,\n    render: ({\n      handleSubmit\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"login-email\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, \"Email\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 21\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(Field, {\n      name: \"email\",\n      validate: composeValidators(isEmail, required),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"login-email\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"example@email.com\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 25\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 27\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"login-password\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, \"Email\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(Field, {\n      name: \"password\",\n      validate: composeValidators(minLength(3), required),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"login-password\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Password\",\n      type: \"password\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 25\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 27\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"form-button-p font-white bs-2 w100 mt12 pt8 pb8 r\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, \"Login\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }), tab === CONSTANTS.TABS.LOGIN.CREATEUSER && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleCreateUser,\n    validate: values => {\n      const errors = {};\n\n      if (!values.checkPassword) {\n        errors.checkPassword = \"Required\";\n      }\n\n      if (values.password !== values.checkPassword) {\n        errors.checkPassword = \"Passwords must match\";\n      }\n\n      return errors;\n    },\n    render: ({\n      handleSubmit\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"create-email\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 19\n      }\n    }, \"Email\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 21\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(Field, {\n      name: \"email\",\n      validate: composeValidators(isEmail, required),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 19\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"create-email\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"example@email.com\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 27\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"create-password\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    }, \"Password\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(Field, {\n      name: \"password\",\n      validate: composeValidators(minLength(3), required),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"create-password\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Password\",\n      type: \"password\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 25\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 27\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"create-confirm\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 19\n      }\n    }, \"Confirm Password\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, \"*\")), /*#__PURE__*/React.createElement(Field, {\n      name: \"checkPassword\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 19\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"create-confirm\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Confirm Password\",\n      type: \"password\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 25\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 27\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"form-button-p font-white bs-2 w100 mt12 pt8 pb8 r\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 19\n      }\n    }, \"Create User\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mb8 ml8 mr8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"link font-n1\",\n    onClick: handleForgotPassword,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 11\n    }\n  }, \"Forgot your password?\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ml8 mr8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"link font-n1\",\n    onClick: handleDemo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, \"Try a demo account\"))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    user: state.user,\n    tab: state.navigation.tabs.login\n  };\n};\n\nconst mapDispatchToProps = {\n  loginUser,\n  createUser,\n  demoUser,\n  setNotification,\n  setTab\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Login.js"],"names":["React","useEffect","connect","Form","Field","useHistory","loginUser","createUser","demoUser","setNotification","setTab","required","minLength","isEmail","composeValidators","CONSTANTS","Icon","Login","user","tab","history","data","username","push","handleLogin","email","password","handleForgotPassword","NOTIFICATION","MESSAGE","handleCreateUser","checkPassword","handleDemo","TABS","LOGIN","UserIcon","CREATEUSER","CreateUserIcon","handleSubmit","input","meta","error","touched","values","errors","mapStateToProps","state","navigation","tabs","login","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Form, Field } from \"react-final-form\";\nimport { useHistory } from \"react-router-dom\";\nimport { loginUser, createUser, demoUser } from \"../reducers/userReducer\";\nimport { setNotification } from \"../reducers/notificationReducer\";\nimport { setTab } from \"../reducers/navigationReducer\";\nimport {\n  required,\n  minLength,\n  isEmail,\n  composeValidators,\n} from \"../utils/formValidatorHelper\";\nimport { CONSTANTS } from \"../static/constants\";\nimport { Icon } from \"./Shared/Icon\";\nimport UserIcon from \"../styles/svg/user.svg\";\nimport CreateUserIcon from \"../styles/svg/create-user.svg\";\n\nconst Login = ({\n  loginUser,\n  createUser,\n  user,\n  demoUser,\n  setNotification,\n  setTab,\n  tab,\n}) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    if (user.data.username) {\n      history.push(\"/\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleLogin = async ({ email, password }) => {\n    await loginUser(email, password);\n  };\n\n  const handleForgotPassword = () => {\n    setNotification(\"Forgot password clicked\", CONSTANTS.NOTIFICATION.MESSAGE);\n  };\n\n  const handleCreateUser = async ({ email, password, checkPassword }) => {\n    await createUser(email, password, checkPassword);\n  };\n\n  const handleDemo = () => {\n    demoUser();\n  };\n\n  return (\n    <div className=\"vh100 w100 fade-in relative bg-blue-1\">\n      <div className=\"center login\">\n        <div className=\"h100 r p24 m8 bs-3 bg-1\">\n          <h1 className=\"bold f24 mb16 mt16 text-center\">\n            PropertyInvestorDash\n          </h1>\n          <div className=\"flex-row mb16\">\n            <button\n              type=\"button\"\n              className={`tab-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n                tab === CONSTANTS.TABS.LOGIN.LOGIN ? \"active\" : \"\"\n              }`}\n              onClick={() => setTab(\"login\", CONSTANTS.TABS.LOGIN.LOGIN)}\n            >\n              <Icon\n                size={\"20px\"}\n                url={UserIcon}\n                color={\"black\"}\n                hover={false}\n                active={false}\n              />\n              <span className=\"ml8 f16 bold\">Login</span>\n            </button>\n            <button\n              type=\"button\"\n              className={`tab-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n                tab === CONSTANTS.TABS.LOGIN.CREATEUSER ? \"active\" : \"\"\n              }`}\n              onClick={() => setTab(\"login\", CONSTANTS.TABS.LOGIN.CREATEUSER)}\n            >\n              <Icon\n                size={\"20px\"}\n                url={CreateUserIcon}\n                color={\"black\"}\n                hover={false}\n                active={false}\n              />\n              <span className=\"ml8 f16 bold\">Create User</span>\n            </button>\n          </div>\n          {tab === CONSTANTS.TABS.LOGIN.LOGIN && (\n            <Form\n              onSubmit={handleLogin}\n              render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                  <label htmlFor=\"login-email\" className=\"f16 mb8\">\n                    Email\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                  <Field\n                    name=\"email\"\n                    validate={composeValidators(isEmail, required)}\n                  >\n                    {({ input, meta }) => (\n                      <div className=\"relative mb20\">\n                        <input\n                          id=\"login-email\"\n                          className=\"form-input bs-1 w100\"\n                          placeholder=\"example@email.com\"\n                          type=\"text\"\n                          {...input}\n                        />\n                        {meta.error && meta.touched && (\n                          <span className=\"form-error f10\">{meta.error}</span>\n                        )}\n                      </div>\n                    )}\n                  </Field>\n                  <label htmlFor=\"login-password\" className=\"f16 mb8\">\n                    Email\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                  <Field\n                    name=\"password\"\n                    validate={composeValidators(minLength(3), required)}\n                  >\n                    {({ input, meta }) => (\n                      <div className=\"relative mb20\">\n                        <input\n                          id=\"login-password\"\n                          className=\"form-input bs-1 w100\"\n                          placeholder=\"Password\"\n                          type=\"password\"\n                          {...input}\n                        />\n                        {meta.error && meta.touched && (\n                          <span className=\"form-error f10\">{meta.error}</span>\n                        )}\n                      </div>\n                    )}\n                  </Field>\n                  <button\n                    className=\"form-button-p font-white bs-2 w100 mt12 pt8 pb8 r\"\n                    type=\"submit\"\n                  >\n                    Login\n                  </button>\n                </form>\n              )}\n            />\n          )}\n          {tab === CONSTANTS.TABS.LOGIN.CREATEUSER && (\n            <Form\n              onSubmit={handleCreateUser}\n              validate={(values) => {\n                const errors = {};\n                if (!values.checkPassword) {\n                  errors.checkPassword = \"Required\";\n                }\n                if (values.password !== values.checkPassword) {\n                  errors.checkPassword = \"Passwords must match\";\n                }\n                return errors;\n              }}\n              render={({ handleSubmit }) => (\n                <form onSubmit={handleSubmit}>\n                  <label htmlFor=\"create-email\" className=\"f16 mb8\">\n                    Email\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                  <Field\n                    name=\"email\"\n                    validate={composeValidators(isEmail, required)}\n                  >\n                    {({ input, meta }) => (\n                      <div className=\"relative mb20\">\n                        <input\n                          id=\"create-email\"\n                          className=\"form-input bs-1 w100\"\n                          placeholder=\"example@email.com\"\n                          type=\"text\"\n                          {...input}\n                        />\n                        {meta.error && meta.touched && (\n                          <span className=\"form-error f10\">{meta.error}</span>\n                        )}\n                      </div>\n                    )}\n                  </Field>\n                  <label htmlFor=\"create-password\" className=\"f16 mb8\">\n                    Password\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                  <Field\n                    name=\"password\"\n                    validate={composeValidators(minLength(3), required)}\n                  >\n                    {({ input, meta }) => (\n                      <div className=\"relative mb20\">\n                        <input\n                          id=\"create-password\"\n                          className=\"form-input bs-1 w100\"\n                          placeholder=\"Password\"\n                          type=\"password\"\n                          {...input}\n                        />\n                        {meta.error && meta.touched && (\n                          <span className=\"form-error f10\">{meta.error}</span>\n                        )}\n                      </div>\n                    )}\n                  </Field>\n                  <label htmlFor=\"create-confirm\" className=\"f16 mb8\">\n                    Confirm Password\n                    <span className=\"font-red f12 bold ml4\">*</span>\n                  </label>\n                  <Field name=\"checkPassword\">\n                    {({ input, meta }) => (\n                      <div className=\"relative mb20\">\n                        <input\n                          id=\"create-confirm\"\n                          className=\"form-input bs-1 w100\"\n                          placeholder=\"Confirm Password\"\n                          type=\"password\"\n                          {...input}\n                        />\n                        {meta.error && meta.touched && (\n                          <span className=\"form-error f10\">{meta.error}</span>\n                        )}\n                      </div>\n                    )}\n                  </Field>\n                  <button\n                    className=\"form-button-p font-white bs-2 w100 mt12 pt8 pb8 r\"\n                    type=\"submit\"\n                  >\n                    Create User\n                  </button>\n                </form>\n              )}\n            />\n          )}\n        </div>\n        <div className=\"mb8 ml8 mr8\">\n          <span className=\"link font-n1\" onClick={handleForgotPassword}>\n            Forgot your password?\n          </span>\n        </div>\n        <div className=\"ml8 mr8\">\n          <span className=\"link font-n1\" onClick={handleDemo}>\n            Try a demo account\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.user,\n    tab: state.navigation.tabs.login,\n  };\n};\n\nconst mapDispatchToProps = {\n  loginUser,\n  createUser,\n  demoUser,\n  setNotification,\n  setTab,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n"]},"metadata":{},"sourceType":"module"}