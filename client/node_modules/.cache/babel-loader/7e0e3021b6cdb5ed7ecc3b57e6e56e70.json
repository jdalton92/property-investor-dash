{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport userService from \"../services/user\";\nconst initialState = {\n  helperMessages: [],\n  notifications: []\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case \"SET_MESSAGE\":\n      newState = { ...state\n      };\n      newState.helperMessages.push(action.message);\n      console.log(\"newState\", newState);\n      return newState;\n\n    case \"SET_MESSAGES\":\n      newState = { ...state\n      };\n      newState.helperMessages.push(...action.messages);\n      console.log(\"newState\", newState);\n      return newState;\n\n    case \"SET_NOTIFICATION\":\n      newState = { ...state\n      };\n      return newState.notifications.push(action.content);\n\n    case \"CLEAR_NOTIFICATION\":\n      newState = { ...state\n      };\n      return newState.notifications.filter(n => n.id !== action.content.id);\n\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return dispatch => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type\n      }\n    });\n  };\n};\nexport const clearNotification = id => {\n  return dispatch => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      content: {\n        id\n      }\n    });\n  };\n};\nexport const hideHelperMessage = (userId, type) => {\n  return async dispatch => {\n    try {\n      await userService.readMessage(userId, type);\n      dispatch({\n        type: \"SET_MESSAGE\",\n        message: type\n      });\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/notificationReducer.js"],"names":["v4","uuid","userService","initialState","helperMessages","notifications","notificationReducer","state","action","newState","type","push","message","console","log","messages","content","filter","n","id","setNotification","dispatch","clearNotification","hideHelperMessage","userId","readMessage","e","response","data","error"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAf,QAA2B,MAA3B;AACA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,cAAc,EAAE,EADG;AAEnBC,EAAAA,aAAa,EAAE;AAFI,CAArB;;AAKA,MAAMC,mBAAmB,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC5D,MAAIC,QAAJ;;AACA,UAAQD,MAAM,CAACE,IAAf;AACE,SAAK,aAAL;AACED,MAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,OAAX;AACAE,MAAAA,QAAQ,CAACL,cAAT,CAAwBO,IAAxB,CAA6BH,MAAM,CAACI,OAApC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;AACA,aAAOA,QAAP;;AACF,SAAK,cAAL;AACEA,MAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,OAAX;AACAE,MAAAA,QAAQ,CAACL,cAAT,CAAwBO,IAAxB,CAA6B,GAAGH,MAAM,CAACO,QAAvC;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBL,QAAxB;AACA,aAAOA,QAAP;;AACF,SAAK,kBAAL;AACEA,MAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,OAAX;AACA,aAAOE,QAAQ,CAACJ,aAAT,CAAuBM,IAAvB,CAA4BH,MAAM,CAACQ,OAAnC,CAAP;;AACF,SAAK,oBAAL;AACEP,MAAAA,QAAQ,GAAG,EAAE,GAAGF;AAAL,OAAX;AACA,aAAOE,QAAQ,CAACJ,aAAT,CAAuBY,MAAvB,CAA+BC,CAAD,IAAOA,CAAC,CAACC,EAAF,KAASX,MAAM,CAACQ,OAAP,CAAeG,EAA7D,CAAP;;AACF;AACE,aAAOZ,KAAP;AAlBJ;AAoBD,CAtBD;;AAwBA,OAAO,MAAMa,eAAe,GAAG,CAACR,OAAD,EAAUF,IAAV,KAAmB;AAChD,SAAQW,QAAD,IAAc;AACnB,UAAMF,EAAE,GAAGlB,IAAI,EAAf;AACAoB,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,kBADC;AAEPM,MAAAA,OAAO,EAAE;AACPG,QAAAA,EADO;AAEPP,QAAAA,OAFO;AAGPF,QAAAA;AAHO;AAFF,KAAD,CAAR;AAQD,GAVD;AAWD,CAZM;AAcP,OAAO,MAAMY,iBAAiB,GAAIH,EAAD,IAAQ;AACvC,SAAQE,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAAC;AACPX,MAAAA,IAAI,EAAE,oBADC;AAEPM,MAAAA,OAAO,EAAE;AACPG,QAAAA;AADO;AAFF,KAAD,CAAR;AAMD,GAPD;AAQD,CATM;AAWP,OAAO,MAAMI,iBAAiB,GAAG,CAACC,MAAD,EAASd,IAAT,KAAkB;AACjD,SAAO,MAAOW,QAAP,IAAoB;AACzB,QAAI;AACF,YAAMnB,WAAW,CAACuB,WAAZ,CAAwBD,MAAxB,EAAgCd,IAAhC,CAAN;AACAW,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,aADC;AAEPE,QAAAA,OAAO,EAAEF;AAFF,OAAD,CAAR;AAID,KAND,CAME,OAAOgB,CAAP,EAAU;AACVL,MAAAA,QAAQ,CAAC;AACPX,QAAAA,IAAI,EAAE,kBADC;AAEPM,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAEc,CAAC,CAACC,QAAF,CAAWC,IAAX,CAAgBC,KADlB;AAEPnB,UAAAA,IAAI,EAAE;AAFC;AAFF,OAAD,CAAR;AAOD;AACF,GAhBD;AAiBD,CAlBM;AAoBP,eAAeJ,mBAAf","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport userService from \"../services/user\";\n\nconst initialState = {\n  helperMessages: [],\n  notifications: [],\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case \"SET_MESSAGE\":\n      newState = { ...state };\n      newState.helperMessages.push(action.message);\n      console.log(\"newState\", newState);\n      return newState;\n    case \"SET_MESSAGES\":\n      newState = { ...state };\n      newState.helperMessages.push(...action.messages);\n      console.log(\"newState\", newState);\n      return newState;\n    case \"SET_NOTIFICATION\":\n      newState = { ...state };\n      return newState.notifications.push(action.content);\n    case \"CLEAR_NOTIFICATION\":\n      newState = { ...state };\n      return newState.notifications.filter((n) => n.id !== action.content.id);\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return (dispatch) => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type,\n      },\n    });\n  };\n};\n\nexport const clearNotification = (id) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      content: {\n        id,\n      },\n    });\n  };\n};\n\nexport const hideHelperMessage = (userId, type) => {\n  return async (dispatch) => {\n    try {\n      await userService.readMessage(userId, type);\n      dispatch({\n        type: \"SET_MESSAGE\",\n        message: type,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport default notificationReducer;\n"]},"metadata":{},"sourceType":"module"}