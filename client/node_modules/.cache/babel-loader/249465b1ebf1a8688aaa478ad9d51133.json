{"ast":null,"code":"var _jsxFileName = \"/home/james/development/property-investor-dash/client/src/components/Dashboards/SaveDashboardModal.js\";\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Field } from \"react-final-form\";\nimport { setModal } from \"../../reducers/navigationReducer\";\nimport { saveDashboard, updateDashboard } from \"../../reducers/dashboardReducer\";\nimport { setNotification } from \"../../reducers/notificationReducer\";\nimport { composeValidators, required, maxLength, minLength } from \"../../utils/formValidatorHelper\";\nimport { formatDate } from \"../../utils/dashboardHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport Button from \"../Shared/Button\";\nimport { Icon } from \"../Shared/Icon\";\nimport CloseIcon from \"../../styles/svg/close.svg\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\nimport OverwriteIcon from \"../../styles/svg/overwrite.svg\";\n\nconst SaveDashboardModal = ({\n  isFetching,\n  currentDashboard,\n  savedDashboards,\n  user,\n  setModal,\n  setNotification,\n  saveDashboard,\n  updateDashboard\n}) => {\n  const [saveNew, setSaveNew] = useState(true);\n  const [selectedDashboard, setSelectedDashboard] = useState(\"\");\n  const history = useHistory();\n\n  const handleSave = async saveData => {\n    if (!user.data.username) {\n      setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n      setNotification(\"Please login to save dashboard\", \"danger\");\n      return;\n    }\n\n    const dashObject = {\n      values: currentDashboard,\n      ...saveData\n    };\n    await saveDashboard(dashObject);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n    setNotification(`${saveData.description} saved`, \"success\");\n  };\n\n  const handleOverwrite = async id => {\n    // Original saved data\n    const dashboard = savedDashboards.filter(d => d._id === id); // New data\n\n    dashboard.data = currentDashboard;\n    await updateDashboard(dashboard);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n    setNotification(`${dashboard.description} updated`, \"success\");\n  };\n\n  const handleCancel = e => {\n    // React Final Form handles preventDefault()\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"modal mt60 fixed r bs-3 bg-1 p20\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    ariaLabel: \"Close\",\n    dataBalloonPos: \"left\",\n    extraClass: \"modal-close-btn mt20 mr20 button-p align-c justify-c\",\n    onClick: handleCancel,\n    iconUrl: CloseIcon,\n    iconColor: \"white\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"f20 bold mb16\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, \"Save Dashboard\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"flex-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: `save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${saveNew ? \"active\" : \"\"}`,\n    onClick: () => setSaveNew(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: SaveIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, \"Save New\")), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    className: `save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${saveNew ? \"\" : \"active\"}`,\n    onClick: () => setSaveNew(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Icon, {\n    size: \"20px\",\n    url: OverwriteIcon,\n    color: \"black\",\n    hover: false,\n    active: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"ml8 f16 bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \"Overwrite Existing\"))), saveNew && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSave,\n    render: ({\n      handleSubmit,\n      form\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      className: \"save-form mt20 mb20\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"save-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \"Description\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 19\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"description\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 15\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"save-description\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Description\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 23\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"save-description\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }\n    }, \"Address\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 19\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"address\",\n      validate: composeValidators(required, minLength(3), maxLength(200)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"relative mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", Object.assign({\n      id: \"save-address\",\n      className: \"form-input bs-1 w100\",\n      placeholder: \"Address\",\n      type: \"text\"\n    }, input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 21\n      }\n    })), meta.error && meta.touched && /*#__PURE__*/React.createElement(\"span\", {\n      className: \"form-error f10\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 23\n      }\n    }, meta.error))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      className: \"form-button-p bs-3 font-white mt12 pt8 pb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, \"Save As\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }), !saveNew && savedDashboards.length === 0 && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 9\n    }\n  }, \"No saved dashboards...\"), !saveNew && savedDashboards.length > 0 && /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleOverwrite,\n    render: ({\n      handleSubmit,\n      form,\n      values\n    }) => /*#__PURE__*/React.createElement(\"form\", {\n      className: \"save-form mt20 mb20\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"flex-row align-c relative\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"save-overwrite\",\n      className: \"f16 mb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 17\n      }\n    }, \"Dashboard\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"font-red f12 bold ml4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 19\n      }\n    }, \"*\"))), /*#__PURE__*/React.createElement(Field, {\n      name: \"dashboard\",\n      validate: required,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 15\n      }\n    }, ({\n      input,\n      meta\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"mh300 o-y-auto\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"table\", {\n      id: \"save-overwrite\",\n      className: \"overpayments w100 mb20\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 27\n      }\n    }, \"Ref\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 27\n      }\n    }, \"Description\"), /*#__PURE__*/React.createElement(\"th\", {\n      className: \"h768\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 27\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 27\n      }\n    }, \"Created\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 27\n      }\n    }, \"Overwrite\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 23\n      }\n    }, savedDashboards.map((d, i) => {\n      var _d$values;\n\n      let type;\n\n      if (d.values.type === \"developer\") {\n        type = \"Developer\";\n      } else if ((_d$values = d.values) === null || _d$values === void 0 ? void 0 : _d$values.investor) {\n        type = \"Investor\";\n      } else {\n        type = \"Owner Occupier\";\n      }\n\n      return /*#__PURE__*/React.createElement(\"tr\", {\n        key: i,\n        onClick: () => selectedDashboard === d._id ? setSelectedDashboard(\"\") : setSelectedDashboard(d._id),\n        className: `${d._id === selectedDashboard ? \"selected\" : null}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 31\n        }\n      }, i + 1), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 31\n        }\n      }, d.description), /*#__PURE__*/React.createElement(\"td\", {\n        className: \"h768\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 31\n        }\n      }, type), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 31\n        }\n      }, formatDate(d.date)), /*#__PURE__*/React.createElement(\"td\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 31\n        }\n      }, /*#__PURE__*/React.createElement(\"input\", {\n        className: \"ml16\",\n        type: \"checkbox\",\n        checked: d._id === selectedDashboard,\n        value: d._id,\n        onChange: () => setSelectedDashboard(d._id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 33\n        }\n      })));\n    }))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-buttons\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      disabled: selectedDashboard === \"\",\n      type: \"submit\",\n      className: \"form-button-p bs-3 font-white mt12 pt8 pb8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }, \"Save\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    isFetching: state.dashboards.isFetching,\n    currentDashboard: state.dashboards.currentDashboard.values,\n    savedDashboards: state.dashboards.savedDashboards,\n    saveDashboardModal: state.navigation.modal.saveDashboard,\n    user: state.user,\n    requestSuceed: state.navigation.requestSuceed\n  };\n};\n\nconst mapDispatchToProps = {\n  setModal,\n  saveDashboard,\n  updateDashboard,\n  setNotification\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SaveDashboardModal);","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/components/Dashboards/SaveDashboardModal.js"],"names":["React","useState","connect","useHistory","Form","Field","setModal","saveDashboard","updateDashboard","setNotification","composeValidators","required","maxLength","minLength","formatDate","CONSTANTS","Button","Icon","SaveDashboardModal","isFetching","currentDashboard","savedDashboards","user","saveNew","setSaveNew","selectedDashboard","setSelectedDashboard","history","handleSave","saveData","data","username","MODALS","SAVEDASHBOARD","dashObject","values","description","handleOverwrite","id","dashboard","filter","d","_id","handleCancel","e","CloseIcon","SaveIcon","OverwriteIcon","handleSubmit","form","input","meta","error","touched","length","map","i","type","investor","date","mapStateToProps","state","dashboards","saveDashboardModal","navigation","modal","requestSuceed","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { Form, Field } from \"react-final-form\";\nimport { setModal } from \"../../reducers/navigationReducer\";\nimport {\n  saveDashboard,\n  updateDashboard,\n} from \"../../reducers/dashboardReducer\";\nimport { setNotification } from \"../../reducers/notificationReducer\";\nimport {\n  composeValidators,\n  required,\n  maxLength,\n  minLength,\n} from \"../../utils/formValidatorHelper\";\nimport { formatDate } from \"../../utils/dashboardHelper\";\nimport { CONSTANTS } from \"../../static/constants\";\nimport Button from \"../Shared/Button\";\nimport { Icon } from \"../Shared/Icon\";\nimport CloseIcon from \"../../styles/svg/close.svg\";\nimport SaveIcon from \"../../styles/svg/save.svg\";\nimport OverwriteIcon from \"../../styles/svg/overwrite.svg\";\n\nconst SaveDashboardModal = ({\n  isFetching,\n  currentDashboard,\n  savedDashboards,\n  user,\n  setModal,\n  setNotification,\n  saveDashboard,\n  updateDashboard,\n}) => {\n  const [saveNew, setSaveNew] = useState(true);\n  const [selectedDashboard, setSelectedDashboard] = useState(\"\");\n  const history = useHistory();\n\n  const handleSave = async (saveData) => {\n    if (!user.data.username) {\n      setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n      setNotification(\"Please login to save dashboard\", \"danger\");\n      return;\n    }\n\n    const dashObject = {\n      values: currentDashboard,\n      ...saveData,\n    };\n\n    await saveDashboard(dashObject);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n    setNotification(`${saveData.description} saved`, \"success\");\n  };\n\n  const handleOverwrite = async (id) => {\n    // Original saved data\n    const dashboard = savedDashboards.filter((d) => d._id === id);\n    // New data\n    dashboard.data = currentDashboard;\n    await updateDashboard(dashboard);\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n    setNotification(`${dashboard.description} updated`, \"success\");\n  };\n\n  const handleCancel = (e) => {\n    // React Final Form handles preventDefault()\n    setModal(CONSTANTS.MODALS.SAVEDASHBOARD, false);\n  };\n\n  return (\n    <div className=\"modal mt60 fixed r bs-3 bg-1 p20\">\n      <Button\n        ariaLabel={\"Close\"}\n        dataBalloonPos={\"left\"}\n        extraClass={\"modal-close-btn mt20 mr20 button-p align-c justify-c\"}\n        onClick={handleCancel}\n        iconUrl={CloseIcon}\n        iconColor={\"white\"}\n      />\n      <h2 className=\"f20 bold mb16\">Save Dashboard</h2>\n      <div className=\"flex-row\">\n        <button\n          type=\"submit\"\n          className={`save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n            saveNew ? \"active\" : \"\"\n          }`}\n          onClick={() => setSaveNew(true)}\n        >\n          <Icon\n            size={\"20px\"}\n            url={SaveIcon}\n            color={\"black\"}\n            hover={false}\n            active={false}\n          />\n          <span className=\"ml8 f16 bold\">Save New</span>\n        </button>\n        <button\n          type=\"submit\"\n          className={`save-opt button-transp-s rt pl16 pr16 flex-row align-c justify-c jump ${\n            saveNew ? \"\" : \"active\"\n          }`}\n          onClick={() => setSaveNew(false)}\n        >\n          <Icon\n            size={\"20px\"}\n            url={OverwriteIcon}\n            color={\"black\"}\n            hover={false}\n            active={false}\n          />\n          <span className=\"ml8 f16 bold\">Overwrite Existing</span>\n        </button>\n      </div>\n      {saveNew && (\n        <Form\n          onSubmit={handleSave}\n          render={({ handleSubmit, form }) => (\n            <form className=\"save-form mt20 mb20\" onSubmit={handleSubmit}>\n              <div className=\"flex-row align-c relative\">\n                <label htmlFor=\"save-description\" className=\"f16 mb8\">\n                  Description\n                  <span className=\"font-red f12 bold ml4\">*</span>\n                </label>\n              </div>\n              <Field\n                name=\"description\"\n                validate={composeValidators(\n                  required,\n                  minLength(3),\n                  maxLength(200)\n                )}\n              >\n                {({ input, meta }) => (\n                  <div className=\"relative mb20\">\n                    <input\n                      id=\"save-description\"\n                      className=\"form-input bs-1 w100\"\n                      placeholder=\"Description\"\n                      type=\"text\"\n                      {...input}\n                    />\n                    {meta.error && meta.touched && (\n                      <span className=\"form-error f10\">{meta.error}</span>\n                    )}\n                  </div>\n                )}\n              </Field>\n              <div className=\"flex-row align-c relative\">\n                <label htmlFor=\"save-description\" className=\"f16 mb8\">\n                  Address\n                  <span className=\"font-red f12 bold ml4\">*</span>\n                </label>\n              </div>\n              <Field\n                name=\"address\"\n                validate={composeValidators(\n                  required,\n                  minLength(3),\n                  maxLength(200)\n                )}\n              >\n                {({ input, meta }) => (\n                  <div className=\"relative mb20\">\n                    <input\n                      id=\"save-address\"\n                      className=\"form-input bs-1 w100\"\n                      placeholder=\"Address\"\n                      type=\"text\"\n                      {...input}\n                    />\n                    {meta.error && meta.touched && (\n                      <span className=\"form-error f10\">{meta.error}</span>\n                    )}\n                  </div>\n                )}\n              </Field>\n              <div className=\"form-buttons\">\n                <button\n                  type=\"submit\"\n                  className=\"form-button-p bs-3 font-white mt12 pt8 pb8\"\n                >\n                  Save As\n                </button>\n              </div>\n            </form>\n          )}\n        />\n      )}\n      {!saveNew && savedDashboards.length === 0 && (\n        <div>No saved dashboards...</div>\n      )}\n      {!saveNew && savedDashboards.length > 0 && (\n        <Form\n          onSubmit={handleOverwrite}\n          render={({ handleSubmit, form, values }) => (\n            <form className=\"save-form mt20 mb20\" onSubmit={handleSubmit}>\n              <div className=\"flex-row align-c relative\">\n                <label htmlFor=\"save-overwrite\" className=\"f16 mb8\">\n                  Dashboard\n                  <span className=\"font-red f12 bold ml4\">*</span>\n                </label>\n              </div>\n              <Field name=\"dashboard\" validate={required}>\n                {({ input, meta }) => (\n                  <div className=\"mh300 o-y-auto\">\n                    <table\n                      id=\"save-overwrite\"\n                      className=\"overpayments w100 mb20\"\n                    >\n                      <thead>\n                        <tr>\n                          <th className=\"h768\">Ref</th>\n                          <th>Description</th>\n                          <th className=\"h768\">Type</th>\n                          <th>Created</th>\n                          <th>Overwrite</th>\n                        </tr>\n                      </thead>\n                      <tbody>\n                        {savedDashboards.map((d, i) => {\n                          let type;\n                          if (d.values.type === \"developer\") {\n                            type = \"Developer\";\n                          } else if (d.values?.investor) {\n                            type = \"Investor\";\n                          } else {\n                            type = \"Owner Occupier\";\n                          }\n                          return (\n                            <tr\n                              key={i}\n                              onClick={() =>\n                                selectedDashboard === d._id\n                                  ? setSelectedDashboard(\"\")\n                                  : setSelectedDashboard(d._id)\n                              }\n                              className={`${\n                                d._id === selectedDashboard ? \"selected\" : null\n                              }`}\n                            >\n                              <td className=\"h768\">{i + 1}</td>\n                              <td>{d.description}</td>\n                              <td className=\"h768\">{type}</td>\n                              <td>{formatDate(d.date)}</td>\n                              <td>\n                                <input\n                                  className=\"ml16\"\n                                  type=\"checkbox\"\n                                  checked={d._id === selectedDashboard}\n                                  value={d._id}\n                                  onChange={() => setSelectedDashboard(d._id)}\n                                />\n                              </td>\n                            </tr>\n                          );\n                        })}\n                      </tbody>\n                    </table>\n                  </div>\n                )}\n              </Field>\n              <div className=\"form-buttons\">\n                <button\n                  disabled={selectedDashboard === \"\"}\n                  type=\"submit\"\n                  className=\"form-button-p bs-3 font-white mt12 pt8 pb8\"\n                >\n                  Save\n                </button>\n              </div>\n            </form>\n          )}\n        />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    isFetching: state.dashboards.isFetching,\n    currentDashboard: state.dashboards.currentDashboard.values,\n    savedDashboards: state.dashboards.savedDashboards,\n    saveDashboardModal: state.navigation.modal.saveDashboard,\n    user: state.user,\n    requestSuceed: state.navigation.requestSuceed,\n  };\n};\n\nconst mapDispatchToProps = {\n  setModal,\n  saveDashboard,\n  updateDashboard,\n  setNotification,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SaveDashboardModal);\n"]},"metadata":{},"sourceType":"module"}