{"ast":null,"code":"import { v4 as uuid } from \"uuid\";\nimport userService from \"../services/user\";\nconst initialState = {\n  helperMessages: [],\n  notifications: []\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  let newState;\n\n  switch (action.type) {\n    case \"SET_MESSAGE\":\n      newState = { ...state\n      };\n      newState.helperMessages = [...state.helperMessages, action.message];\n      return newState;\n\n    case \"SET_MESSAGES\":\n      if (action.messages.length) {\n        newState = { ...state\n        };\n        newState.helperMessages = [...state.helperMessages, ...action.messages];\n        return newState;\n      } else {\n        return state;\n      }\n\n    case \"SET_NOTIFICATION\":\n      newState = { ...state\n      };\n      newState.notifications = [...state.notifications, action.content];\n      return newState;\n\n    case \"CLEAR_NOTIFICATION\":\n      newState = { ...state\n      };\n      newState.notifications = state.notifications.filter(n => n.id !== action.id);\n      return newState;\n\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return dispatch => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type\n      }\n    });\n  };\n};\nexport const clearNotification = id => {\n  return dispatch => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      id\n    });\n  };\n};\nexport const hideHelperMessage = (userId, type) => {\n  return async dispatch => {\n    try {\n      await userService.readMessage(userId, type);\n      dispatch({\n        type: \"SET_MESSAGE\",\n        message: type\n      });\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport default notificationReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/notificationReducer.js"],"names":["v4","uuid","userService","initialState","helperMessages","notifications","notificationReducer","state","action","newState","type","message","messages","length","content","filter","n","id","setNotification","dispatch","clearNotification","hideHelperMessage","userId","readMessage","e","console","log","response","data","error"],"mappings":"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","sourcesContent":["import { v4 as uuid } from \"uuid\";\nimport userService from \"../services/user\";\n\nconst initialState = {\n  helperMessages: [],\n  notifications: [],\n};\n\nconst notificationReducer = (state = initialState, action) => {\n  let newState;\n  switch (action.type) {\n    case \"SET_MESSAGE\":\n      newState = { ...state };\n      newState.helperMessages = [...state.helperMessages, action.message];\n      return newState;\n    case \"SET_MESSAGES\":\n      if (action.messages.length) {\n        newState = { ...state };\n        newState.helperMessages = [...state.helperMessages, ...action.messages];\n        return newState;\n      } else {\n        return state;\n      }\n    case \"SET_NOTIFICATION\":\n      newState = { ...state };\n      newState.notifications = [...state.notifications, action.content];\n      return newState;\n    case \"CLEAR_NOTIFICATION\":\n      newState = { ...state };\n      newState.notifications = state.notifications.filter(\n        (n) => n.id !== action.id\n      );\n      return newState;\n    default:\n      return state;\n  }\n};\n\nexport const setNotification = (message, type) => {\n  return (dispatch) => {\n    const id = uuid();\n    dispatch({\n      type: \"SET_NOTIFICATION\",\n      content: {\n        id,\n        message,\n        type,\n      },\n    });\n  };\n};\n\nexport const clearNotification = (id) => {\n  return (dispatch) => {\n    dispatch({\n      type: \"CLEAR_NOTIFICATION\",\n      id,\n    });\n  };\n};\n\nexport const hideHelperMessage = (userId, type) => {\n  return async (dispatch) => {\n    try {\n      await userService.readMessage(userId, type);\n      dispatch({\n        type: \"SET_MESSAGE\",\n        message: type,\n      });\n    } catch (e) {\n      console.log(e);\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport default notificationReducer;\n"]},"metadata":{},"sourceType":"module"}