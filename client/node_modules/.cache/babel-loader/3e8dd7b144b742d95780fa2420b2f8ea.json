{"ast":null,"code":"import loginService from \"../services/login\";\nimport { CONSTANTS } from \"../static/constants\";\nimport { setToken, destroyToken } from \"../utils/tokenHelper\";\nimport userService from \"../services/user\";\nconst initialState = {\n  isFetching: true,\n  data: {}\n};\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"USER_REQUEST\":\n      return { ...state,\n        isFetching: true\n      };\n\n    case \"USER_REQUEST_FAIL\":\n      return { ...state,\n        isFetching: false\n      };\n\n    case \"SET_USER\":\n      return {\n        isFetching: false,\n        data: action.data\n      };\n\n    case \"CLEAR_USER\":\n      return {\n        isFetching: false,\n        data: {}\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const initUser = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      const loggedUserJSON = window.localStorage.getItem(\"loggedUser\");\n\n      if (loggedUserJSON) {\n        const user = JSON.parse(loggedUserJSON);\n        setToken(user.token);\n        dispatch({\n          type: \"SET_USER\",\n          data: user\n        });\n        dispatch({\n          type: \"SET_MESSAGES\",\n          messages: user.helperMessages\n        });\n      } else {\n        dispatch({\n          type: \"USER_REQUEST_FAIL\"\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport const demoUser = () => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      const user = CONSTANTS.DEMOTOKEN;\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      setToken(user.token);\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user\n      });\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport const createUser = ({\n  username,\n  email,\n  password,\n  checkPassword\n}) => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      await userService.create({\n        username,\n        email,\n        password,\n        checkPassword\n      });\n      const user = await loginService.login({\n        email,\n        password\n      });\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      setToken(user.token);\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: `${username} created`,\n          type: \"success\"\n        }\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\"\n        }\n      });\n    }\n  };\n};\nexport const logoutUser = () => {\n  return async dispatch => {\n    destroyToken();\n    window.localStorage.removeItem(\"loggedUser\");\n    dispatch({\n      type: \"CLEAR_USER\"\n    });\n  };\n};\nexport const loginUser = (email, password) => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      const user = await loginService.login({\n        email,\n        password\n      });\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      setToken(user.token);\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: \"wrong username or password\",\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport const updateUser = (newEmail, oldPassword, newPassword, confirmNewPassword, id) => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      const user = await userService.update(newEmail, oldPassword, newPassword, confirmNewPassword, id);\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      destroyToken();\n      setToken(user.token);\n      dispatch({\n        type: \"SET_USER\",\n        data: user\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport const deleteUser = (password, id) => {\n  return async dispatch => {\n    dispatch({\n      type: \"USER_REQUEST\"\n    });\n\n    try {\n      await userService.deleteUser(password, id);\n      window.localStorage.removeItem(\"loggedUser\");\n      destroyToken();\n      dispatch({\n        type: \"CLEAR_USER\"\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\"\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\"\n        }\n      });\n    }\n  };\n};\nexport default userReducer;","map":{"version":3,"sources":["/home/james/development/property-investor-dash/client/src/reducers/userReducer.js"],"names":["loginService","CONSTANTS","setToken","destroyToken","userService","initialState","isFetching","data","userReducer","state","action","type","initUser","dispatch","loggedUserJSON","window","localStorage","getItem","user","JSON","parse","token","messages","helperMessages","e","content","message","response","error","demoUser","DEMOTOKEN","setItem","stringify","createUser","username","email","password","checkPassword","create","login","logoutUser","removeItem","loginUser","updateUser","newEmail","oldPassword","newPassword","confirmNewPassword","id","update","deleteUser"],"mappings":"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","sourcesContent":["import loginService from \"../services/login\";\nimport { CONSTANTS } from \"../static/constants\";\nimport { setToken, destroyToken } from \"../utils/tokenHelper\";\nimport userService from \"../services/user\";\n\nconst initialState = { isFetching: true, data: {} };\n\nconst userReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case \"USER_REQUEST\":\n      return { ...state, isFetching: true };\n    case \"USER_REQUEST_FAIL\":\n      return { ...state, isFetching: false };\n    case \"SET_USER\":\n      return {\n        isFetching: false,\n        data: action.data,\n      };\n    case \"CLEAR_USER\":\n      return { isFetching: false, data: {} };\n    default:\n      return state;\n  }\n};\n\nexport const initUser = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      const loggedUserJSON = window.localStorage.getItem(\"loggedUser\");\n\n      if (loggedUserJSON) {\n        const user = JSON.parse(loggedUserJSON);\n        setToken(user.token);\n\n        dispatch({\n          type: \"SET_USER\",\n          data: user,\n        });\n        dispatch({\n          type: \"SET_MESSAGES\",\n          messages: user.helperMessages,\n        });\n      } else {\n        dispatch({\n          type: \"USER_REQUEST_FAIL\",\n        });\n      }\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport const demoUser = () => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      const user = CONSTANTS.DEMOTOKEN;\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      setToken(user.token);\n\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages,\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport const createUser = ({ username, email, password, checkPassword }) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      await userService.create({\n        username,\n        email,\n        password,\n        checkPassword,\n      });\n\n      const user = await loginService.login({\n        email,\n        password,\n      });\n\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n\n      setToken(user.token);\n\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages,\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user,\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: `${username} created`,\n          type: \"success\",\n        },\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"danger\",\n        },\n      });\n    }\n  };\n};\n\nexport const logoutUser = () => {\n  return async (dispatch) => {\n    destroyToken();\n    window.localStorage.removeItem(\"loggedUser\");\n    dispatch({\n      type: \"CLEAR_USER\",\n    });\n  };\n};\n\nexport const loginUser = (email, password) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      const user = await loginService.login({\n        email,\n        password,\n      });\n\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      setToken(user.token);\n\n      dispatch({\n        type: \"SET_MESSAGES\",\n        messages: user.helperMessages,\n      });\n      dispatch({\n        type: \"SET_USER\",\n        data: user,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: \"wrong username or password\",\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport const updateUser = (\n  newEmail,\n  oldPassword,\n  newPassword,\n  confirmNewPassword,\n  id\n) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      const user = await userService.update(\n        newEmail,\n        oldPassword,\n        newPassword,\n        confirmNewPassword,\n        id\n      );\n\n      window.localStorage.setItem(\"loggedUser\", JSON.stringify(user));\n      destroyToken();\n      setToken(user.token);\n\n      dispatch({\n        type: \"SET_USER\",\n        data: user,\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport const deleteUser = (password, id) => {\n  return async (dispatch) => {\n    dispatch({\n      type: \"USER_REQUEST\",\n    });\n    try {\n      await userService.deleteUser(password, id);\n\n      window.localStorage.removeItem(\"loggedUser\");\n      destroyToken();\n\n      dispatch({\n        type: \"CLEAR_USER\",\n      });\n    } catch (e) {\n      dispatch({\n        type: \"USER_REQUEST_FAIL\",\n      });\n      dispatch({\n        type: \"SET_NOTIFICATION\",\n        content: {\n          message: e.response.data.error,\n          type: \"error\",\n        },\n      });\n    }\n  };\n};\n\nexport default userReducer;\n"]},"metadata":{},"sourceType":"module"}